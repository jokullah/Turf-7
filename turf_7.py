# -*- coding: utf-8 -*-
"""Turf 7

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LZapAhuB6X75fss9mGj2zqsFPzu2NqtD
"""

#@title Run Once To Start

from random import choice, gauss, randint, random, uniform
from math import e, log, sqrt
import requests

#This portion of the code is dedicated to creating the framework for the different football league systems as well as names/nationalities etc.

FN = dict()
LN = dict()

#Country lists based on strength, strongest to weakest
tier1Countries = list()
tier2Countries = list()
tier3Countries = list()
tier4Countries = list()
tier5Countries = list()

#Country lists based on continent
europeanCountries = list()
northAmericanCountries = list()
southAmericanCountries = list()
africanCountries = list()
asianCountries = list()
oceanicCountries = list()

#Reading in files for names

f = requests.get("https://raw.githubusercontent.com/jokullah/Turf-7/main/allFN.txt")
f = f.text
lines = f.splitlines()

currentNation = None
multiWordNameCountries = {'THE NETHERLANDS':'The Netherlands', 'SOUTH KOREA':'South Korea', 'NORTH MACEDONIA':'North Macedonia', 'BOSNIA AND HERZEGOVINA':'Bosnia and Herzegovina', 'BURKINA FASO':'Burkina Faso', 'THE GAMBIA':'The Gambia', 'SIERRA LEONE':'Sierra Leone', 'THE UNITED STATES OF AMERICA':'The United States of America'}
for l in lines:
    if l == l.upper():
      currentNation = l
    elif l in ['European', 'North American', 'South American', 'African', 'Asian', 'Oceanic']:
      continentsDict = {'European':europeanCountries, 'North American':northAmericanCountries, 'South American':southAmericanCountries, 'African':africanCountries, 'Asian':asianCountries, 'Oceanic':oceanicCountries}
      if currentNation not in list(multiWordNameCountries.keys()): continentsDict[l].append(currentNation.capitalize())
      else: continentsDict[l].append(multiWordNameCountries[currentNation])
    elif l[0] == 't':
      tierDictionary = {'t1':tier1Countries, 't2':tier2Countries, 't3':tier3Countries, 't4':tier4Countries, 't5':tier5Countries}

      if currentNation not in list(multiWordNameCountries.keys()): tierDictionary[l].append(currentNation.capitalize())
      else: tierDictionary[l].append(multiWordNameCountries[currentNation])
    else:
      if currentNation not in FN: FN[currentNation] = list()
      else: FN[currentNation].append(l)

g = requests.get("https://raw.githubusercontent.com/jokullah/Turf-7/main/allLN.txt")
g = g.text
lines = g.splitlines()

currentNation = None
for l in lines:
    if l == l.upper():
      currentNation = l
    else:
      if currentNation not in LN: LN[currentNation] = list()
      else: LN[currentNation].append(l)

#CLUBS
#Clubs are stored in dictionaries, depending on where the player plays and in which tier
countriesWithLeague = list()
clubsDictionary = dict()
numberOfTiers = dict()
leagueNumbers = dict()

h = requests.get("https://raw.githubusercontent.com/jokullah/Turf-7/main/clubs.txt")
h = h.text
lines = h.splitlines()

currentNation = None
currentTier = None
tierTranslate = {1:'Tier1',2:'Tier2'}
for l in lines:
    if l == l.upper() and l not in ['QPR','SPAL','PSG','PSV','AZ','NEC','AIK','URAL', 'UCD', 'AEK', 'PAOK', 'TSC', 'FH', 'KR', 'KA', 'ÍBV', 'HK', 'MTK', 'FCSB', 'CSKA 1948', 'DAC 1904']:
      N = l.capitalize() if l != 'THE NETHERLANDS' else 'The Netherlands'
      currentNation = N
      if N not in countriesWithLeague: countriesWithLeague.append(N)
      if currentNation not in clubsDictionary: clubsDictionary[currentNation] = dict()
    elif l[0] == 't':
      currentTier = int(l[1])
      if currentNation not in numberOfTiers: numberOfTiers[currentNation] = 1
      if l[1] == 2: numberOfTiers[currentNation] = 2
      t = tierTranslate[currentTier]
      cd = clubsDictionary[currentNation]
      if t not in cd: cd[t] = list()
    else:
      clubsDictionary[currentNation][tierTranslate[currentTier]].append(l)

#COMPETITIONS
#Based on strength of average club ability needed to win each competition
leagueNames = {"England":{"Tier1":"English Premier League", "Tier2":"EFL Championship"}, "Germany":{"Tier1":"Bundesliga", "Tier2":"2. Bundesliga"}, "France":{"Tier1":"Ligue 1", "Tier2":"Ligue 2"}, "Italy":{"Tier1":"Serie A", "Tier2":"Serie B"}, "Spain":{"Tier1":"La Liga", "Tier2":"La Liga 2"}, "Portugal":{"Tier1":"Liga Portugal"}, "The Netherlands":{"Tier1":"Eredivise"}, "Belgium":{"Tier1":"Belgian Pro League"}, "Sweden":{"Tier1":"Allsvenskan"}, "Poland":{"Tier1":"Ekstraklasa"}, "Russia":{"Tier1":"Russian Premier League"}, "Ukraine":{"Tier1":"Ukrainian Premier League"}, "Turkey":{"Tier1":"Super Lig"}, 'Scotland':{'Tier1':'Scottish Premiership'}, 'Ireland':{'Tier1':'Irish Premier Division'}, 'Norway':{'Tier1':'Eliteserien'}, 'Denmark':{'Tier1':'Danish Superliga'}, 'Austria':{'Tier1':'Austrian Bundesliga'}, 'Switzerland':{'Tier1':'Swiss Super League'}, 'Greece':{'Tier1':'Greek Super League'}, 'Serbia':{'Tier1':'Serbian Super Liga'}, 'Czechia':{'Tier1':'Czech Liga'}, 'Croatia':{'Tier1':'HNL'}, 'Iceland':{'Tier1':'Besta Deildin'}, 'Hungary':{'Tier1':'NB I'}, 'Romania':{'Tier1':'Liga 1'}, 'Bulgaria':{'Tier1':'Parva Liga'}, 'Slovakia':{'Tier1':'Super Liga'}, 'Slovenia':{'Tier1':'Prva Liga'}}
cupNames = {"England":["FA Cup", "EFL League Cup"], "Germany":"DFB Pokal", "France":"Coupe de France", "Italy":"Coppa Italia", "Spain":"Copa del Rey", "Portugal":"Taca de Portugal", "The Netherlands":"KNVB Beker", "Belgium":"Belgian Cup", "Sweden":"Svenska Cupen", "Poland":"Puchar Polski", "Russia":"Russian Cup", "Ukraine":"Ukrainian Cup", "Turkey":"Turkiye Kupasi", 'Scotland':'Scottish Cup', 'Ireland':'Irish Cup', 'Norway':'Norwegian Cup', 'Denmark':'Danish Cup', 'Austria':'ÖFB-Cup', 'Switzerland':'Swiss Cup', 'Greece':'Greek Cup', 'Serbia':'Serbian Cup', 'Czechia':'Pohár FACR', 'Croatia':'Croatian Football Cup', 'Iceland':'Mjólkurbikarinn', 'Hungary':'Magyar Kupa', 'Romania':'Cupa României', 'Bulgaria':'Bulgarian Cup', 'Slovakia':'Slovak Cup', 'Slovenia':'Slovenian Football Cup'}
leagueAbilities = {"England":18, "France":16, "Germany":17, "Italy":17, "Spain":18, "Portugal":13, "The Netherlands":13, "Belgium":11, "Sweden":6, "Poland":8, "Russia":9, "Ukraine":9, "Turkey":11, 'Scotland':10, 'Ireland':5, 'Norway':6, 'Denmark':8, 'Austria':9, 'Switzerland':9, 'Greece':10, 'Serbia':10, 'Czechia':9, 'Croatia':9, 'Iceland':5, 'Hungary':7, 'Romania':7, 'Bulgaria':7, 'Slovakia':6, 'Slovenia':6}
cupAbilities = {"England":17, "France":15, "Germany":16, "Italy":16, "Spain":17, "Portugal":12, "The Netherlands":12, "Belgium":10, "Sweden":5, "Poland":7, "Russia":8, "Ukraine":8, "Turkey":10, 'Scotland':9, 'Ireland':4, 'Norway':5, 'Denmark':7, 'Austria':8, 'Switzerland':8, 'Greece':9, 'Serbia':9, 'Czechia':8, 'Croatia':8, 'Iceland':4, 'Hungary':6, 'Romania':6, 'Bulgaria':6, 'Slovakia':5, 'Slovenia':5}

#Average weekly wage per division
leagueWages = {"England":{"Tier1":40000, "Tier2":10000}, "Germany":{"Tier1":25000, "Tier2":7500}, "France":{"Tier1":20000, "Tier2":7500}, "Italy":{"Tier1":30000, "Tier2":7500}, "Spain":{"Tier1":30000, "Tier2":7500}, "Portugal":{"Tier1":15000}, "The Netherlands":{"Tier1":15000}, "Belgium":{"Tier1":10000}, "Sweden":{"Tier1":4000}, "Poland":{"Tier1":6000}, "Russia":{"Tier1":7500}, "Ukraine":{"Tier1":6500}, "Turkey":{"Tier1":9000}, 'Scotland':{'Tier1':5000}, 'Ireland':{'Tier1':3500}, 'Norway':{'Tier1':3500}, 'Denmark':{'Tier1':5000}, 'Austria':{'Tier1':6000}, 'Switzerland':{'Tier1':6000}, 'Greece':{'Tier1':6000}, 'Serbia':{'Tier1':6000}, 'Czechia':{'Tier1':5000}, 'Croatia':{'Tier1':5000}, 'Iceland':{'Tier1':2500}, 'Hungary':{'Tier1':5000}, 'Romania':{'Tier1':4000}, 'Bulgaria':{'Tier1':4000}, 'Slovakia':{'Tier1':3000}, 'Slovenia':{'Tier1':3000}}

for N in clubsDictionary:
  leagueNumbers[N] = dict()
  numberOfTiers[N] = 1
  for T in clubsDictionary[N]:
    leagueNumbers[N][T] = len(clubsDictionary[N][T])
    if T == 'Tier2': numberOfTiers[N] = 2

#Continental competitions
#Qualification
uclAutoSpots = {'England':[1,2,3,4], 'Germany':[1,2,3,4], 'France':[1,2], 'Italy':[1,2,3,4], 'Spain':[1,2,3,4], 'Portugal':[1,2], 'The Netherlands':[1], 'Russia':[1], 'Ukraine':[1], 'Turkey':[1], 'Scotland':[1], 'Austria':[1]}
uclQualifyingSpots = {'France':[3], 'Portugal':[3], 'The Netherlands':[2], 'Belgium':[1], 'Sweden':[1], 'Poland':[1], 'Russia':[2], 'Ukraine':[2], 'Turkey':[2], 'Scotland':[2], 'Ireland':[1], 'Norway':[1], 'Denmark':[1,2], 'Austria':[1,2], 'Switzerland':[1,2], 'Greece':[1,2], 'Serbia':[1], 'Czechia':[1,2], 'Croatia':[1,2], 'Iceland':[1], 'Hungary':[1], 'Romania':[1], 'Bulgaria':[1], 'Slovakia':[1], 'Slovenia':[1]}
uelAutoSpots = {'England':[5,6], 'Germany':{5,6}, 'France':[4,5], 'Italy':[5,6], 'Spain':[5,6], 'Portugal':[4], 'The Netherlands':[3], 'Belgium':[2], 'Poland':[2], 'Russia':[3]}
uelQualifyingSpots = {'Sweden':[2], 'Ukraine':[3], 'Slovakia':[2]}
ueclAutoSpots = {'England':[7], 'Germany':[7], 'Italy':[7], 'Spain':[7]}
ueclQualifyingSpots = {'France':[6], 'Portugal':[5,6], 'The Netherlands':[4,5], 'Belgium':[3,4], 'Sweden':[3,4], 'Poland':[3,4], 'Russia':[4,5], 'Ukraine':[4,5], 'Turkey':[3,4], 'Scotland':[3,4], 'Ireland':[2,3], 'Norway':[2,3], 'Denmark':[3,4], 'Austria':[3,4], 'Switzerland':[3,4], 'Greece':[3,4], 'Serbia':[1,2], 'Czechia':[3,4], 'Croatia':[3,4], 'Iceland':[2,3], 'Slovakia':[3], 'Hungary':[2,3], 'Romania':[2,3], 'Bulgaria':[2,3], 'Slovenia':[2,3]}

#Competition difficulties

ueclAbility = 13
uelAbility = 15
uclAbility = 18

uscAbility = 16
cwcAbility = 16

wcAbility = 19
ecAbility = 19
caAbility = 17
afconAbility = 12
acAbility = 12
gcAbility = 11
nlAbility = 17

#@title Simulate

#Determining club and nation abilities (how strong each club is at the start of world simulation)

#A few more notable teams have their abilities declared specially
clubAbility = {"Arsenal":randint(14,18), "Manchester City":randint(14,18), "Spurs":randint(13,17), "Chelsea":randint(14,18), "Liverpool":randint(14,18), "Manchester United":randint(14,18), "Bayern":randint(15,18), "Dortmund":randint(13,17), "Mgladbach":randint(12,16), "Leverkusen":randint(12,16), "PSG":randint(14,18), "Lyon":randint(12,16), "Marseille":randint(11,15), "Monaco":randint(11,15), "Juventus":randint(14,18), "Inter":randint(13,17), "Milan":randint(13,17), "Napoli":randint(13,17), "Roma":randint(12,16), "Lazio":randint(12,16), "Real Madrid":randint(16,19), "Barcelona":randint(16,19), "Atletico Madrid":randint(14,18), "Sevilla":randint(12,16), "Ajax":randint(11,15), "Porto":randint(11,15), "Benfica":randint(11,15), "Sporting":randint(11,15), "Legia Warsaw":randint(6,10), "Lech Poznan":randint(6,10), "Zenit":randint(7,11), "Spartak Moscow":randint(7,11), "Dinamo Moscow":randint(7,11), "CSKA Moscow":randint(7,11), "Skakhtar Donetsk":randint(7,11), "Dynamo Kyiv":randint(7,11), "Galatasaray":randint(9,13), "Fenerbache":randint(9,13), "Besiktas":randint(9,13), "Istanbul Baseksehir":randint(9,13), "Rangers":randint(9,12), "Celtic":randint(9,12), 'Copenhagen':randint(8,10), 'Salzburg':randint(8,11), 'Young Boys':randint(8,11), 'Basel':randint(8,11), 'Panathinaikos':randint(9,11), 'AEK':randint(9,11), 'Olympiakos':randint(9,11), 'Red Star Belgrade':randint(9,11), 'Slavia Prague':randint(8,11), 'Sparta Prague':randint(8,11), 'Dinamo Zabreb':randint(8,10)} #Base strength of notable teams

#Determiningu National Team Ability
natAbility = dict()
for c in tier1Countries: natAbility[c] = randint(14,18)
for c in tier2Countries: natAbility[c] = randint(12,16)
for c in tier3Countries: natAbility[c] = randint(9,13)
for c in tier4Countries: natAbility[c] = randint(6,10)
for c in tier5Countries: natAbility[c] = randint(4,8)

#Giving the rest of the clubs their abilities, based on how strong the tier they play in is
for country in countriesWithLeague:
  if numberOfTiers[country] == 2:
    for club in clubsDictionary[country]["Tier1"]:
      if club not in clubAbility: clubAbility[club] = int(gauss((round((leagueAbilities[country]/2)+1,0)), 2))
    for club in clubsDictionary[country]["Tier2"]:
      if club not in clubAbility: clubAbility[club] = int(gauss(5, 1.5))
  if numberOfTiers[country] == 1:
    for club in clubsDictionary[country]["Tier1"]:
      if club not in clubAbility: clubAbility[club] = int(gauss((round((leagueAbilities[country]/2)+1,0)), 1.5))

allClubsPerNation = dict()
for n in countriesWithLeague: allClubsPerNation[n] = list()

#Useful lists that roughly sort clubs based on strength
allClubs = []
clubs3 = []
clubs6 = []
clubs11 = []
clubs14 = []
clubs18 = []

#For loops creating the club lists above
for country in countriesWithLeague:
  for club in clubsDictionary[country]["Tier1"]:
    allClubs.append(club)
    allClubsPerNation[country].append(club)
    if clubAbility[club] <= 4: clubs3.append(club)
    elif 5 <= clubAbility[club] <= 8: clubs6.append(club)
    elif 9 <= clubAbility[club] <= 12: clubs11.append(club)
    elif 13 <= clubAbility[club] <= 16: clubs14.append(club)
    else: clubs18.append(club)
  if numberOfTiers[country] == 2:
    for club in clubsDictionary[country]["Tier2"]:
      allClubs.append(club)
      allClubsPerNation[country].append(club)
      if clubAbility[club] <= 4: clubs3.append(club)
      elif 5 <= clubAbility[club] <= 8: clubs6.append(club)
      elif 9 <= clubAbility[club] <= 12: clubs11.append(club)
      elif 13 <= clubAbility[club] <= 16: clubs14.append(club)
      else: clubs18.append(club)

#For printing
class color:
   BOLD = '\033[1m'
   END = '\033[0m'
   UNDERLINE = '\033[4m'
   ITALICS = '\033[3m'

##################FUNCTIONS##################

def getNationality(): #Where the player is from
  j = int(gauss(50, 20)) #Normal curve, more likely that a player be from one of the more significant footballing nations
  if j <= 30: return choice(tier1Countries)
  elif 30 < j <= 35: return choice(tier2Countries)
  elif 35 < j <= 65: return choice(tier3Countries)
  elif 65 < j <= 90: return choice(tier4Countries)
  else: return choice(tier5Countries)

def getFirstClub(nationality, ability): #Triggered only to determine first club
  if nationality in countriesWithLeague: #Player more likely to start at a club from their home country
    jbean = randint(1, 7)
    if jbean == 7: #Absolutely random
      return choice(allClubs)
    else:
      if numberOfTiers[nationality] == 1: return choice(clubsDictionary[nationality]["Tier1"])
      if numberOfTiers[nationality] == 2:
       if ability >= 3: return choice(clubsDictionary[nationality]["Tier1"])
       else: return choice(clubsDictionary[nationality]["Tier2"])
  else: #If their nation has no league
    if ability >= 6: return choice(clubs18)
    elif 5 <= ability <= 5: return choice(clubs14)
    elif 3 <= ability <= 4: return choice(clubs11)
    elif 1 <= ability <= 2: return choice(clubs6)
    else: return choice(clubs3)

def getPosition(heightList, pace, shooting, passing, dribbling, defending, physicality, height, firstPosition):
  #Check for goalkeeper
  ht = max(shooting, passing, dribbling, defending) #Highest technical stat
  hi = heightList.index(height)
  if hi >= 11: hm = e**(hi-11)/60
  else: hm = 0
  htm = (-e**(ht/5))+3
  if random() < 0.5*hm*htm and (firstPosition == ('goalkeeper') or firstPosition == None): return 'goalkeeper'
  #Outfielders
  group = None
  groupDict = {'dd':'defender', 'dm':'midfielder', 'da':'attacker'}
  dd = (1.5*defending+0.75*physicality+0.2*dribbling-0.5*shooting)/10
  dm = (1.5*passing+0.5*dribbling+0.25*shooting+0.1*defending)/10
  da = (1.5*shooting+0.5*dribbling+0.25*passing+0.25*physicality-0.5*defending)/10
  ddict = {dd:'dd', dm:'dm', da:'da'}
  D = sorted([dd,dm,da]) #The above sliders sorted in ascending orter
  if D[2]-D[1] >= 0.2: group = groupDict[ddict[max(D)]]
  else:
    ratio = D[2]/D[1] if D[1] != 0 else D[2]/0.1
    if uniform(0,1+ratio) > 1: group = groupDict[ddict[D[2]]]
    else: group = groupDict[ddict[D[1]]]
  #Defenders
  if group == 'defender':
    if random() < (e**((pace-10)/11))-0.8 or hi <= 6: #fullback
      if shooting >= passing:
        if randint(1,10) != 10:
          if preferredFoot == 'right': return 'right wing back'
          else: return 'left wing back'
        else:
          if preferredFoot == 'right': return 'left wing back'
          else: return 'right wing back'
      else:
        if randint(1,10) != 10:
          if preferredFoot == 'right': return 'right back'
          else: return 'left back'
        else:
          if preferredFoot == 'right': return 'left back'
          else: return 'right back'
    else: return 'center back'
  #Midfielders
  elif group == 'midfielder':
    if defending+uniform(-1,1) >= passing+uniform(-1,1): return 'defensive midfielder'
    if shooting+uniform(-1,1) >= passing+uniform(-1,1): return 'attacking midfielder'
    if dribbling+uniform(-1,1) >= passing+uniform(-1,1):
        if randint(1,10) < 8:
          if preferredFoot == 'right': return 'right midfielder'
          else: return 'left midfielder'
        else:
          if preferredFoot == 'right': return 'left midfielder'
          else: return 'right midfielder'
    return 'central midfielder'
  #Attackers
  else:
    if dribbling+uniform(-1,1) >= shooting+uniform(-1,1): return choice(['left winger', 'right winger'])
    else: return 'center forward'

def calculateAbility(position, pace, shooting, pasing, dribbling, defending, physicality, goalkeeping): #Using the base stats to calculate the overall ability, based on position
  if position == 'goalkeeper':
    return goalkeeping
  elif position == 'center back':
    return int(round(0.1*pace+0*shooting+0.05*passing+0*dribbling+0.55*defending+0.3*physicality,0))
  elif position in ['left back', 'right back']:
    return int(round(0.25*pace+0*shooting+0.1*passing+0.2*dribbling+0.35*defending+0.1*physicality,0))
  elif position in ['left wing back', 'right wing back']:
    return int(round(0.25*pace+0.05*shooting+0.15*passing+0.2*dribbling+0.25*defending+0.1*physicality,0))
  elif position == 'defensive midfielder':
    return int(round(0.1*pace+0*shooting+0.3*passing+0.05*dribbling+0.4*defending+0.15*physicality,0))
  elif position == 'central midfielder':
    return int(round(0.05*pace+0.05*shooting+0.5*passing+0.2*dribbling+0.1*defending+0.1*physicality,0))
  elif position == 'attacking midfielder':
    return int(round(0.1*pace+0.2*shooting+0.3*passing+0.3*dribbling+0*defending+0.1*physicality,0))
  elif position in ['left midfielder', 'right midfielder']:
    return int(round(0.25*pace+0.1*shooting+0.2*passing+0.3*dribbling+0.05*defending+0.1*physicality,0))
  elif position in ['left winger', 'right winger']:
    return int(round(0.25*pace+0.2*shooting+0.1*passing+0.35*dribbling+0*defending+0.1*physicality,0))
  elif position == 'center forward':
    return int(round(0.15*pace+0.5*shooting+0.1*passing+0.1*dribbling+0*defending+0.15*physicality,0))

def getValue(age, ability, country, tier, seasonQualities): #How valuable the player is
  base = 1000000*((e**((-age+40)/5))-0.2*age+12) #Age plays a big part
  sq = seasonQualities[-1] if len(seasonQualities) > 0 else 0.75*ability #If they've been playing well recently, boost in value
  ab = 0.5*ability+0.5*sq
  abilityModifier = ((ab-2)**4)/5000 if ab <= 9 else e**((3*ab)/8000)-0.99+((ab)**2)/120
  leagueStrength = leagueAbilities[country] if tier == 1 else 6
  leagueModifier = e**(0.025*(leagueStrength+20))-1.6
  r = -5 if base*abilityModifier < 1000000 else -6

  return int(round(base*abilityModifier,r))

def expectedWages(ability, cAbility, country, t): #How much a player would on average make weekly based on their skill and the club's resources
  base = leagueWages[country][t] #Base wage amount based on league average

  cRatio = cAbility/(leagueAbilities[country]/1.75) if t == 'Tier1' else cAbility/9 #How good club is compared to rest of league
  if cRatio <= 0.5: cRatio = 0.5 #Cap

  aRatio = ability/(leagueAbilities[country]/1.75) if t == 'Tier1' else cAbility/9 #How good player is compared to rest of league

  crCoefficient = e**(cRatio-0.65)-0.4 #Effect of cRatio
  abilityCoefficient = aRatio

  if crCoefficient >= 2: crCoefficient = 2

  xWages = base*crCoefficient*aRatio

  return round(xWages, -3) if xWages <= 10000 else round(xWages,-4)

def desiredWages(xWages, personalityTraits): #The wages the player himself demands
  base = xWages

  pModifier = 1
  if 'generous' in personalityTraits: pModifier = 0.75
  elif 'greedy' in personalityTraits: pModifier = 1.25

  dWages = base*pModifier*uniform(0.9,1.1) #Small random factor in there because why not

  return round(dWages, -3) if dWages <= 10000 else round(dWages,-4)

def getManager(club, country):
  if country == 'England' and random() < 0.15:
    nationality = 'England'
  elif country != 'England' and random() < 0.75: nationality = country
  else: nationality = getNationality()

  ability = int(round(gauss(clubAbility[club], clubAbility[club]/5),0))
  formation = choice(['442','433 (flat)','433 (def)','433 (atk)','4231','4411','4222','4321','352','343','541','532'])
  firstName, lastName = choice(FN[nationality.upper()]), choice(LN[nationality.upper()])
  return firstName, lastName, nationality, ability, formation

def checkRivals(club1, club2): #Rival clubs don't sell to each other (possibly not working at the moment)
  rivals = [('Real Madrid','Barcelona'), ('Manchester City','Manchester United'), ('Arsenal','Spurs')]
  if (club1,club2) in rivals or (club2,club1) in rivals: return True
  else: return False

#Transfer negotiations, starting with negotiations between clubs, then between player and buying club
def transferNegotiations(clubsInterested, contract, value, role, loyalty, yearsAtClub, window, demand, myClub, captain, signedContract, ability, underperforming, leaving):

  L = False
  CLUB = None
  FEE = 0

  myClubAbility = clubAbility[myClub]

  #STEP 1: OFFERS
  #Each club

  offers = dict()
  for club in clubsInterested:
    offer = 0
    budget = 1000000*(0.2*((clubAbility[club])**2))
    budget = budget*uniform(0.75,1.25)

    if budget >= value*0.5 or contract <= 1: #If the club is even rich enough to possibly afford him
      #Now lets make the offer

      offer = 10**10
      if budget >= 0.5*value:
        while offer >= 0.75*budget:
          offer = value*uniform(0.25,1.25)
      else:
        offer = uniform(0.25,0.75)*budget

      #If the demand is high enough in comparison to the player's ability, the offer will be higher
      ratio = demand/ability if ability != 0 else demand/0.5
      offer = offer*ratio

      offers[club] = offer

  if len(offers.values()) == 0:
    return False, None, 0

  #STEP 2: CLUBS REVIEW OFFERS
  greenlight = dict() #Clubs whose offers are accepted
  highestBid = max(list(offers.values()))

  #Underperformance coefficient
  uc4 = 1 if underperforming == False else uniform(10,1000)

  for club in offers: #Look at each offer at a time
    offer = offers[club]
    if offer >= 0.5*value: #Offer needs to be a base-line good enough offer
      roleModifier = {0:1,'nonexistent':2, 'minor':1.5, 'rotation':1, 'starter':0.75}
      ratio = offer/value if value != 0 else offer/0.5
      ratioModifier = e**((7*ratio)-8)+0.35*ratio-0.1
      contractModifier = e**(-contract+1)+0.8-0.1*contract
      if contract == 1:
        contractModifier = randint(4, 15)

      notSelling = False
      if ability/clubAbility[club] >= 1.2 and contract >= 2 and random() < 0.75: notSelling = True

      rivalsModifier = 0 if checkRivals(club,myClub) == True else 1

      if underperforming == True: notSelling = False

      if notSelling == False:
        b = roleModifier[role]*ratioModifier*contractModifier*uc4
        if (random() < b) and (offer >= 0.8*highestBid):
          greenlight[club] = offer
      if notSelling == True:
        if random() < roleModifier[role]*ratioModifier*contractModifier*rivalsModifier and offer >= 0.8*highestBid and offer >= 1.5*value:
          greenlight[club] = offer

  if len(greenlight.values()) == 0:
    return False, None, 0

  #STEP 3: PLAYER REVIEWS GREENLIT OFFERS
  descending = dict()

  #Underperforming, more likely to leave

  for club in greenlight:
    clubCountry = None
    for country in countriesWithLeague:
      for c in clubsDictionary[country]['Tier1']:
        if club == c: clubCountry = country
      if numberOfTiers[country] == 2:
        for c in clubsDictionary[country]['Tier2']:
          if club == c: clubCountry = country
    rating = clubAbility[club]
    if clubCountry == nationality: rating += randint(1,2)
    descending[club] = rating

  descending = dict(sorted(descending.items(), key=lambda item: item[1], reverse=True)) #Sorting by descending club ability
  if contract == 0: #special case if player is out of contract
    return True, list(descending.keys())[0], 0

  loyaltyModifier = e**(-loyalty)-0.1*loyalty+2
  if loyalty >= 21: loyaltyModifier = 0 #Will not leave

  #Underperformance coefficient, more likely to leave if doing poorly
  uc2 = randint(2, 10) if underperforming == True else 1

  lyc = yearsAtClub if yearsAtClub != 0 else 0.835
  yacModifier = log(lyc)-0.35*sqrt(lyc)+0.5

  #Iterate through clubs
  for club in descending:
    ratio = demand/descending[club]
    ratioModifier = e**((-2*ratio)+2) #Ratio modifier for the demand of the player and the ability of the offering club
    if ratioModifier >= 2: ratioModifier = 2 #Cap

    ratioModifier2 = descending[club]/myClubAbility if myClubAbility != 0 else descending[club]/0.5 #A separate modifier for the ratio of the current club and the offering club
    if ratioModifier2 < 1: ratioModifier2 = ratioModifier2**5
    elif ratioModifier > 1: ratioModifier2 = ratioModifier2**3

    if loyalty == 0: loyalty = 0.5

    captaincyModifier = 7.5/(loyalty) if captain == True else 1 #Captains less likely to leave, unless they're disloyal
    if captaincyModifier > 1: captaincyModifier = 1

    windowCoefficient = 1 if window == 'summer' else 0.25

    wantsToLeaveCoefficient = 5 if (signedContract == False and contract == 1) else 1

    base = 0.2*loyaltyModifier*ratioModifier*yacModifier*windowCoefficient*ratioModifier2*wantsToLeaveCoefficient*uc2

    #Check how much gametime player expects. May decide not to join stronger club if lack of gametime looms
    expectedRole = getExpectedRole(ability, club, seasonQualities[-1], 0, clubAbility)
    xrDict = {'nonexistent':0.15, 'minor':0.25, 'rotation':0.8, 'starter':1.1}
    if random() > xrDict[expectedRole]:
      base = 0 #Decides not to join

    if random() < base and base >= 0.2 and not (club == 'Athletic Bilbao' and nationality != 'Spain'):
      L = True
      if loyalty >= 20: L = False
      CLUB = club
      FEE = int(round(greenlight[club],-6))
      return L, CLUB, FEE

  if CLUB == None: #Safeguard
    return False, None, 0

  return L, CLUB, FEE

#Player negotiating their contract with their current club
def contractNegotiations(demand, club, age, contract, loyalty, role, yearsAtClub, lastContract, currentYear, captain):
  if contract >= 5: return False, 0

  RENEW = False
  LENGTH = 0

  if demand <= 0: demand = 0.01
  ability = clubAbility[club] if clubAbility[club] != 0 else 0.1

  ratio = demand/ability

  lengthModifier = e**((-0.6*contract)+0.5)

  roleModifier = {0:1,'nonexistent':0.1, 'minor':0.25, 'rotation':0.75, 'starter':1.5}

  ratioModifier2 = e**(2*ratio-3)+0.5*ratio-0.2 #club's ratio modifier

  #First decide if club interested in renewing
  base = lengthModifier*roleModifier[role]*ratioModifier2

  K = True if (contract == 1 and role != 'nonexistent') else False

  if random() >= base and K == False: return False, 0

  #Decide the club's offer

  #Decide whether he renews
  ratioModifier = e**((-6*ratio)+6) #player's ratio modifier
  if ratioModifier >= 0.75: ratioModifier = 0.75

  loyaltyModifier = e**((0.1*loyalty)-1)
  if loyalty >= 10: loyaltyModifier = e**((0.45*loyalty)-7)+1

  yacModifier = (1/(log(0.5*yearsAtClub+2)))+0.09

  captaincyModifier = loyalty*(3/20) if captain == True else 1 #Captains more likely to renew, unless they're disloyal
  if captaincyModifier < 1: captaincyModifier = 1

  tslc = currentYear - lastContract
  tModifier = e**(tslc-3)-0.1
  if tModifier > 1: tModifier = 1

  base = lengthModifier*ratioModifier*loyaltyModifier*roleModifier[role]*yacModifier

  if random() < base: RENEW = True
  else: RENEW = False

  if RENEW == True:
    ageModifier = e**((-age)+17)+2.4-0.05*(age)
    if ageModifier >= 2: ageModifier = 2
    LENGTH = int(gauss(3,0.5)*ageModifier)
    if LENGTH == 0:
      RENEW = False

    if contract >= 5:
      LENGTH = 0
      RENEW = False
    elif contract == 4: LENGTH = 1
    elif contract == 3: LENGTH = randint(1,2)

  return RENEW, LENGTH

def loan(ability, demand, country, allClubsPerNation, allClubs): #Determines where player a player goes on loan
  quality = int(round((0.5*ability + 0.5*demand),0))
  delta = randint(-2,2) #Difference between player quality and loan club ability
  quality += delta
  destination = None

  LIST1 = list() #list of possible destinations in one's country
  for c in allClubsPerNation[country]: #clubs in one's own country more likely
    if clubAbility[c] == quality and not (c=='Athletic Bilbao' and nationality !='Spain'): LIST1.append(c)

  LIST2 = list() #list of possible destinations in other countries
  for c in allClubs: #then the rest
    if clubAbility[c] == quality and not (c=='Athletic Bilbao' and nationality !='Spain'): LIST2.append(c)

  for L in LIST1, LIST2:
    if L == LIST1:
      for c in LIST1:
        if random() < 3/len(LIST1): destination = c
    else:
      for c in LIST2:
        if random() < 1/len(LIST2): destination = c

  #safeguard
  if destination == None:
    try: destination = choice(LIST1)
    except: destination = choice(LIST2)

  return destination

#Free transfers
def freeMove(clubsInterested, nationality):
  descending = dict()
  destination = None

  for club in clubsInterested:
    clubCountry = None
    for country in countriesWithLeague:
      for c in clubsDictionary[country]['Tier1']:
        if club == c: clubCountry = country
      if numberOfTiers[country] == 2:
        for c in clubsDictionary[country]['Tier2']:
          if club == c: clubCountry = country
    rating = clubAbility[club]
    if clubCountry == nationality: rating += randint(1,2)
    descending[club] = rating

  descending = dict(sorted(descending.items(), key=lambda item: item[1], reverse=True)) #Sorting by descending club ability

  for c in descending:
    #Check how much gametime player expects. May decide not to join stronger club if lack of gametime looms
    expectedRole = getExpectedRole(ability, c, seasonQualities[-1], 0, clubAbility)
    base = 1 if not (nationality != "Spain" and c=="Athletic Bilbao") else 0
    xrDict = {'nonexistent':0.2, 'minor':0.35, 'rotation':0.9, 'starter':1}
    if random() > xrDict[expectedRole]:
      base = 0 #Decides not to join
    if random() < 0.75*base:
      destination = c
      break

  if destination == None:
    destination = list(descending.keys())[0]

  return destination

def underperformance(ability, club, age, yearsAtClub, seasonQualities, fee): #determines to which extent (if at all) a club deems their player to be underperforming
  if yearsAtClub == 0: return 1 #Doesn't apply (1 means there is no underperformance)
  if fee == 'free': fee = 0

  #Base factor
  y = yearsAtClub if yearsAtClub <= 2 else 2
  seasonQualitiesAtClub = seasonQualities[-y:]
  F = 0
  a = clubAbility[club]
  if a == 0: a = 0.5
  if a > 16: a = 16 #If you're playing at around 16 level, you won't be underperforming
  for s in seasonQualitiesAtClub: F += (s/a)
  F = F/y #Basically, the factor F represent the sum total of how much the player has underperformed, divided by how long he has been there

  #Age stuff. more lenience if young, basically
  ageCoefficient = -e**((age-11)/25)+3
  if age >= 25: ageCoefficient = 1

  #Fee. more criticism if expensive
  feeCoefficient = 1.5*((clubAbility[club]/(fee/1000000)) if fee != 0 else (2/yearsAtClub))
  if feeCoefficient >= 1.5: feeCoefficient = 1.5

  base = F*ageCoefficient*feeCoefficient

  #Safeguard
  if seasonQualities[-1] >= 0.8*ability: base = 1

  return base

def leaveClub(seasonQuality, ability, age, role): #A mechanic seperate from regular transfer negotiations, in which a player may choose to leave himself, or a club forces him out. to be added
  pass

#See whether a player is sent out on loan
def leaveOnLoan(ability, club, unplayedSeasons, littlePlayedSeasons, age, seasonQuality):
  if seasonQuality >= 14: return False
  ra = randint(1, 10)
  if age >= 25:
    if ra != 10: return False

  diff = ability - clubAbility[club]

  if unplayedSeasons >= 1 or littlePlayedSeasons >= 2 and age >= 23:
    if ra >= 5: return True

  if age <= 22 and (diff <= -8 or unplayedSeasons >= 1 or littlePlayedSeasons >= 2):
    if ra >= 3: return True

def getSeasonQuality(ability, diligence, age, fitness): #How strong the player's season was
  base = gauss((ability-1)+diligence/5, 1)

  #Caps, both high and low
  if ability >= 20: base = gauss((19)+diligence/5, 1)
  if ability <= 4: base = gauss((3)+diligence/5, 1)

  degradation = -e**(-fitness)+0.07*fitness+0.3
  if degradation <= 0: degradation = 0

  ageCoefficient = 1 if age <= 30 else -e**(age-40)-0.1*(age-40)
  if ageCoefficient <= 0.3: ageCoefficient = 0.3

  degradationCoefficient = sqrt(ageCoefficient * degradation) if age >= 30 else 1 #Poor fitness and high age impact playing level negatively
  if degradationCoefficient > 1: degradationCoefficient = 1

  sq = int(base*degradationCoefficient)
  if sq < 0: sq = 0
  if sq > 20: sq = 21
  return sq

def getClubsInterested(allClubs, demand, myClub): #create list of clubs interested in buying player each window
  clubsInterested = list()
  for club in allClubs:
    ability = clubAbility[club] if clubAbility[club] != 0 else 0.01
    if demand == 0: demand = 0.5
    ratio = demand/abs(ability)
    iratio = ability/demand if demand <= 22 else ability/22
    base = e**(1*ratio-4.5) if ratio < 0.906 else 0.46*ratio
    if random() < base and club not in clubsInterested and (iratio)>=0.75 and club != myClub and randint(1,5)==5: clubsInterested.append(club)

  return clubsInterested

def getRole(ability, club, seasonQuality, role, clubAbility): #how much game time player is to be granted
  cAbility = clubAbility[club] if clubAbility[club] <= 19 else 19

  #Season quality can boost (or diminish) role
  if cAbility == 0: cAbility = 0.5
  ratio = (0.5*seasonQuality+0.5*ability)/cAbility
  luck = uniform(0.75,1.25)
  rDict = {0:1, 'nonexistent':1, 'minor':1, 'rotation':1.25, 'starter':1.5}
  established = rDict[role] #More likely to be a starter again if already one
  ratio = ratio*luck*established
  if position == 'goalkeeper': ratio=ratio*1.25 #Higher chance of good role because typically, goalies are starters

  if ratio >= 0.9: role = 'starter'
  elif 0.6 <= ratio < 0.9: role = 'rotation'
  elif 0.4 <= ratio < 0.6: role = 'minor'
  else: role = 'nonexistent'

  return role

def getExpectedRole(ability, club, seasonQuality, age, clubAbility): #how much game time player would expect
  cAbility = clubAbility[club] if clubAbility[club] <= 19 else 19

  #Season quality can boost (or diminish) role
  if cAbility == 0: cAbility = 0.5
  ratio = (0.5*seasonQuality+0.5*ability)/cAbility
  ageCoefficient = 1 if age <= 33 else (33/age)**4
  ratio = ratio*ageCoefficient
  if position == 'goalkeeper': ratio=ratio*1.25
  if ratio >= 0.9: role = 'starter'
  elif 0.6 <= ratio < 0.9: role = 'rotation'
  elif 0.4 <= ratio < 0.6: role = 'minor'
  else: role = 'nonexistent'

  return role

def getAppearances(club, fitness, role, position): #how many games the player plays at his club
  modifier = 1
  #Fitness modifier also affects gametime
  fitnessMod = 0
  if fitness <= 6:
    fitnessMod = 0.85
  elif 7 <= fitness <= 14:
    fitnessMod = 1
  else:
    fitnessMod = 1.15
  #Now for appearances based on roles
  if club in clubs3 or club in clubs6 or club in clubs11: #stronger clubs tend to play more games
    if role == "nonexistent":
      if position == 'goalkeeper': return 0
      app = int((gauss(1, 3))*modifier*fitnessMod)
      while app < 0: app = int((gauss(1, 3))*modifier*fitnessMod)
      return app
    if role == "minor":
      if position == 'goalkeeper': return 0
      app = int((gauss(12, 7))*modifier*fitnessMod)
      while app < 0: app = int((gauss(10, 5))*modifier*fitnessMod)
      return app
    elif role == "rotation":
      if position == 'goalkeeper':
        app = int(gauss(3,1))
        while app < 0: app = int(gauss(3,1))
        return app
      else: return int((gauss(30, 4))*modifier*fitnessMod)
    else:
      return int((gauss(40, 3))*modifier*fitnessMod)
  else:
    if role == "nonexistent":
      if position == 'goalkeeper': return 0
      app = int((gauss(2, 3))*modifier*fitnessMod)
      while app < 0: app = int((gauss(1, 3))*modifier*fitnessMod)
      return app
    if role == "minor":
      if position == 'goalkeeper': return 0
      app = int((gauss(16, 8))*modifier*fitnessMod)
      while app < 0: app = int((gauss(12, 5))*modifier*fitnessMod)
      return app
    elif role == "rotation":
      if position == 'goalkeeper':
        app = int(gauss(3,1))
        while app < 0: app = int(gauss(3,1))
        return app
      else: return int((gauss(35, 4))*modifier*fitnessMod)
    else:
      return int((gauss(45, 4))*modifier*fitnessMod)

def getGoals(position, appearances, seasonQuality, tier, country):
  if appearances == 0: return 0

  gpgDict = {'goalkeeper':0.0001, 'left back':0.05, 'right back':0.05, 'left wing back':0.067, 'right wing back':0.067, 'center back':0.03, 'defensive midfielder':0.05, 'central midfielder':0.067, 'attacking midfielder':0.12, 'left midfielder':0.1, 'right midfielder':0.1, 'left winger':0.175, 'right winger':0.175, 'center forward':0.3}
  divisorDict = {'goalkeeper':1, 'left back':2, 'right back':2, 'left wing back':2, 'right wing back':2, 'center back':2, 'defensive midfielder':2.5, 'central midfielder':2.5, 'attacking midfielder':2.5, 'left midfielder':2.5, 'right midfielder':2.5, 'left winger':4.5, 'right winger':4.5, 'center forward':5.5}
  base = gauss(gpgDict[position], gpgDict[position]/divisorDict[position])

  #Season quality, in relation to league strength, gets its own modifier
  leagueStrength = 9 if tier == 2 else leagueAbilities[country]
  diff = seasonQuality-leagueStrength
  sqModifier = 0.15*diff+2
  adj = 0.0444*leagueStrength+0.378 #Attempt to counter lower-league overscoring

  g = int(round(appearances*base*sqModifier*adj,0))
  if g < 0: g = 0
  return g

def getAssists(position, appearances, seasonQuality, tier, country):
  if appearances == 0: return 0

  apgDict = {'goalkeeper':0.0002, 'left back':0.075, 'right back':0.075, 'left wing back':0.125, 'right wing back':0.125, 'center back':0.025, 'defensive midfielder':0.075, 'central midfielder':0.12, 'attacking midfielder':0.15, 'left midfielder':0.15, 'right midfielder':0.15, 'left winger':0.15, 'right winger':0.15, 'center forward':0.075}
  divisorDict = {'goalkeeper':1, 'left back':2, 'right back':2, 'left wing back':2, 'right wing back':2, 'center back':2, 'defensive midfielder':3.5, 'central midfielder':3, 'attacking midfielder':3, 'left midfielder':3, 'right midfielder':3, 'left winger':4, 'right winger':4, 'center forward':4}
  base = gauss(apgDict[position], apgDict[position]/divisorDict[position])

  #Season quality, in relation to league strength, gets its own modifier
  leagueStrength = 9 if tier == 2 else leagueAbilities[country]
  diff = seasonQuality-leagueStrength
  sqModifier = 0.15*diff+2
  adj = 0.0444*leagueStrength+0.378 #Attempt to counter lower-league over-assisting

  a = int(round(appearances*base*sqModifier*adj,0))
  if a < 0: a = 0
  return a

def ntAppearances(ability, diligence, seasonQuality):
  #Here we must determine the player's role in the national team
  natRole = ""
  if nationality in tier5Countries:
    if ability <= 2:
      natRole = "rotation"
    else:
      natRole = "starter"
  elif nationality in tier4Countries:
    if ability <= 4:
      natRole = "rotation"
    else:
      natRole = "starter"
  elif nationality in tier3Countries:
    if ability <= 8:
      natRole = "rotation"
    else:
      natRole = "starter"
  elif nationality in tier2Countries:
    if ability <= 12:
      natRole = "rotation"
    else:
      natRole = "starter"
  else:
    if ability <= 14:
      natRole = "rotation"
    else:
      natRole = "starter"
  #Season quality can boost role
  if 16 <= seasonQuality:
    natRole = "starter"
  elif 11 <= seasonQuality <= 15:
    if nationality not in (tier1Countries or tier2Countries): role = "starter"
  elif 6 <= seasonQuality <= 10:
    if nationality not in (tier1Countries or tier2Countries or tier3Countries): role = "starter"
  #Now we hand out appearances based on the role and the player's diligence
  modifier = 0
  if diligence <= 6: #We create modifiers based on diligence
    modifier = 0.9
  elif 7 <= diligence <= 14:
    modifier = 1
  else:
    modifier = 1.1
  #Now for appearances based on roles
  if natRole == "rotation":
    return int((gauss(6, 2)) * modifier)
  else:
    return int((gauss(9, 2)) * modifier)

def ntGoals(ability, appearances, diligence, seasonQuality, position):
  if appearances == 0: return 0
  #Here we first create the diligence modifier
  modifier = 0.03*diligence+0.7
  #Season quality gets its own modifier
  sq = 0.055*seasonQuality+0.4
  if sq >= 1.5: sq = 1.5
  #Appearances get a heavy modifier
  apm = 2**(0.25*(appearances-6))
  #Now for instances based on positions
  g = -1

  positionGauss = {'center back':[0, 0.5], 'left back':[0.5, 0.5], 'right back':[0.5, 0.5], 'right wing back':[0.5, 0.5], 'left wing back':[0.5, 0.5], 'defensive midfielder':[0.5,1], 'central midfielder':[0.5,1.5], 'right midfielder':[0.75,1], 'left midfielder':[0.75,1], 'attacking midfielder':[1,1], 'left winger':[1,1.5], 'right winger':[1,1.5], 'center forward':[2,1.5]}

  if position == "goalkeeper":
    j = randint(0,2000) #If the keeper happens to get a goal
    if j == 0:
      return 1
    else:
      return 0
  else:
    a,b = positionGauss[position][0], positionGauss[position][1]
    while g < 0: g = int(gauss(a,b)*sq*apm)
    return g

def ntAssists(ability, appearances, diligence, seasonQuality, position):
  if appearances == 0: return 0
  #Here we first create the diligence modifier
  modifier = 0.03*diligence+0.7
  #Season quality gets its own modifier
  sq = 0.055*seasonQuality+0.4
  if sq >= 1.5: sq = 1.5
  #Appearances get a heavy modifier
  apm = 2**(0.25*(appearances-6))
  #Now for instances based on positions
  g = -1

  positionGauss = {'center back':[0, 0.5], 'left back':[0.5, 0.5], 'right back':[0.5, 0.5], 'right wing back':[0.5, 0.5], 'left wing back':[0.5, 0.5], 'defensive midfielder':[0.5,0.5], 'central midfielder':[1,1.5], 'right midfielder':[1,1.5], 'left midfielder':[1,1.5], 'attacking midfielder':[1,1.5], 'left winger':[1,1.5], 'right winger':[1,1.5], 'center forward':[1,1]}

  if position == "goalkeeper":
    j = randint(0,1000) #If the keeper happens to get an assist
    if j == 0:
      return 1
    else:
      return 0
  else:
    a,b = positionGauss[position][0], positionGauss[position][1]
    while g < 0: g = int(gauss(a,b)*sq*apm)
    return g

def pickedForNT(nationality, ability, nationalTeamAppearances, seasonQuality): #Decide if national team decides to call up player
    hasPlayedForNT = 0 if nationalTeamAppearances <= 0 else natAbility[nationality]/10
    nAbility = natAbility[nationality] if natAbility[nationality] > 0 else 0.5
    f = 0.67*ability +0.33*seasonQuality+hasPlayedForNT
    ratio = f/nAbility

    if random() < ratio and ratio >= (0.8)**(nAbility/10): return True
    else: return False

def getDemand(ability, age, seasonQuality, goals, assists): #how in-demand the player is
  base = ability

  ageModifier = e**(-age)-0.05*age+2.5 #young players more in-demand

  ratio = 0.875*seasonQuality/ability if ability > 0 else seasonQuality/0.5

  if type(goals) == int:
    goalsModifier = goals/10 if (goals > 10 and ability < 14) else 1
  else:
    goalsModifier = 1
  if type(assists) == int:
    assistsModifier = assists/10 if (assists > 10 and ability < 14) else 1
  else:
    assistsModifier = 1

  return int(base*ageModifier*ratio*goalsModifier*assistsModifier)

#simulation of national team tournaments
def worldCup(nationality):
  ability = natAbility[nationality]
  if ability >= 19: ability = 19
  roundReached = 'Group Stage' #How far they progress
  rounds = ['Group Stage', 'Round of 16', 'Quarter Finals', 'Semi Finals', 'Final']
  roundStrengths = {'Group Stage':(wcAbility-6), 'Round of 16':(wcAbility-5), 'Quarter Finals':(wcAbility-3), 'Semi Finals':(wcAbility-1), 'Final':wcAbility}
  while True:
    M = matchup(ability, roundStrengths[roundReached])
    if M == False: return roundReached
    if M == True:
      if roundReached == 'Final': return 'Victory'
      else:
        roundReached = rounds[rounds.index(roundReached)+1]

def euros(country):
  ability = natAbility[nationality]
  if ability >= 19: ability = 19
  roundReached = 'Group Stage' #How far they progress
  rounds = ['Group Stage', 'Round of 16', 'Quarter Finals', 'Semi Finals', 'Final']
  roundStrengths = {'Group Stage':(ecAbility-5), 'Round of 16':(ecAbility-3), 'Quarter Finals':(ecAbility-2), 'Semi Finals':(ecAbility-1), 'Final':ecAbility}
  while True:
    M = matchup(ability, roundStrengths[roundReached])
    if M == False: return roundReached
    if M == True:
      if roundReached == 'Final': return 'Victory'
      else:
        roundReached = rounds[rounds.index(roundReached)+1]

def nationsLeague(country, nationLeague):
  ability = natAbility[nationality]
  lDict = {'A':1, 'B':2, 'C':3, 'D':4}
  aDict = {1:'A', 2:'B', 3:'C', 4:'D'}
  ij=lDict[nationLeague]
  change = None #promotion/relegation
  knockout = False
  #Check for relegation
  if nationLeague in ['A', 'B', 'C']:
    relDict = {'A':8, 'B':5, 'C':1}
    if ability*gauss(1,(2/ij)) < relDict[nationLeague]: #relegated
      nationLeague = aDict[lDict[nationLeague]+1]
      change = 'relegated'
  #Check for promotion
  if nationLeague in ['D', 'C', 'B'] and change == None:
    proDict = {'D':3, 'C':8, 'B':12}
    if ability*gauss(1,(2/ij)) > proDict[nationLeague]: #promoted
      nationLeague = aDict[lDict[nationLeague]-1]
      change = 'promoted'
  #Check for win
  if change == None and nationLeague == 'A':
    roundReached = 'Group Stage' #How far they progress
    rounds = ['Group Stage', 'Semi Finals', 'Final']
    roundStrengths = {'Group Stage':(nlAbility-2), 'Semi Finals':(nlAbility-1), 'Final':nlAbility}
    while True:
      M = matchup(ability, roundStrengths[roundReached])
      if M == False:
        knockout = roundReached
        break
      if M == True:
        if roundReached == 'Final':
          knockout = 'Victory'
          break
        else:
          roundReached = rounds[rounds.index(roundReached)+1]

  return nationLeague, change, knockout

def copaamerica(country):
  ability = natAbility[nationality]
  if ability >= 19: ability = 19
  roundReached = 'Group Stage' #How far they progress
  rounds = ['Group Stage', 'Quarter Finals', 'Semi Finals', 'Final']
  roundStrengths = {'Group Stage':(caAbility-4), 'Quarter Finals':(caAbility-3), 'Semi Finals':(caAbility-1), 'Final':caAbility}
  while True:
    M = matchup(ability, roundStrengths[roundReached])
    if M == False: return roundReached
    if M == True:
      if roundReached == 'Final': return 'Victory'
      else:
        roundReached = rounds[rounds.index(roundReached)+1]

def afcon(country):
  ability = natAbility[nationality]
  if ability >= 19: ability = 19
  roundReached = 'Group Stage' #How far they progress
  rounds = ['Group Stage', 'Round of 16', 'Quarter Finals', 'Semi Finals', 'Final']
  roundStrengths = {'Group Stage':(afconAbility-5), 'Round of 16':(afconAbility-3), 'Quarter Finals':(afconAbility-2), 'Semi Finals':(afconAbility-1), 'Final':afconAbility}
  while True:
    M = matchup(ability, roundStrengths[roundReached])
    if M == False: return roundReached
    if M == True:
      if roundReached == 'Final': return 'Victory'
      else:
        roundReached = rounds[rounds.index(roundReached)+1]

def asiancup(country):
  ability = natAbility[nationality]
  if ability >= 19: ability = 19
  roundReached = 'Group Stage' #How far they progress
  rounds = ['Group Stage', 'Round of 16', 'Quarter Finals', 'Semi Finals', 'Final']
  roundStrengths = {'Group Stage':(acAbility-5), 'Round of 16':(acAbility-3), 'Quarter Finals':(acAbility-2), 'Semi Finals':(acAbility-1), 'Final':acAbility}
  while True:
    M = matchup(ability, roundStrengths[roundReached])
    if M == False: return roundReached
    if M == True:
      if roundReached == 'Final': return 'Victory'
      else:
        roundReached = rounds[rounds.index(roundReached)+1]

def goldcup(country):
  ability = natAbility[nationality]
  if ability >= 19: ability = 19
  roundReached = 'Group Stage' #How far they progress
  rounds = ['Group Stage', 'Quarter Finals', 'Semi Finals', 'Final']
  roundStrengths = {'Group Stage':(gcAbility-4), 'Quarter Finals':(gcAbility-3), 'Semi Finals':(gcAbility-1), 'Final':gcAbility}
  while True:
    M = matchup(ability, roundStrengths[roundReached])
    if M == False: return roundReached
    if M == True:
      if roundReached == 'Final': return 'Victory'
      else:
        roundReached = rounds[rounds.index(roundReached)+1]

def ballondOr(ability, seasonQuality, goatSeason, honors, goals, assists, leagueStrength): #does the player win the coveted golden ball?
  if seasonQuality < 19: return False
  base = 0.5
  if goatSeason == True: base = 1

  abilityModifier = e**(ability-20)+0.05*ability-0.8

  sqModifier = e**(seasonQuality-20) if e**(seasonQuality-20) <= 1.5 else 1.5

  lsModifier = 0.2*leagueStrength-2.3 if leagueStrength >= 12 else 0.02*leagueStrength-0.1

  #various accolades increase chance of receiving this honor
  honorModifier = 0.1
  if 'Champions League' in honors: honorModifier += 0.3
  if 'Europa League' in honors: honorModifier += 0.05
  if 'Conference League' in honors: honorModifier += 0.01
  if len((set(honors)&set(['Premier League', 'La Liga', 'Bundesliga', 'Serie A', 'Ligue 1'])))>=1: honorModifier += 0.15
  if len((set(honors)&set(['FA Cup', 'EFL Cup', 'Copa del Rey', 'DFB Pokal', 'Coppa Italia', 'Coupe de France'])))>=1: honorModifier += 0.05
  if 'World Cup' in honors: honorModifier += 0.5
  if 'Euros' in honors: honorModifier += 0.35
  if 'African Cup of Nations' in honors: honorModifier += 0.15
  if 'Asian Cup' in honors: honorModifier += 0.1
  if 'Gold Cup' in honors: honorModifier += 0.05

  goalsModifier = (goals/75)**4
  assistsModifier = (assists/65)**4

  base = base*abilityModifier*sqModifier*honorModifier + (goalsModifier + assistsModifier)*lsModifier
  if random()<base: return True
  else: return False

#simulation of the club's league campaign
def leagueSeason(country, teamAbility, tier):
  t = 'Tier1' if tier == 1 else 'Tier2'
  number = leagueNumbers[country][t] #number of teams in league
  ability = teamAbility
  if ability == 0: ability = 0.5
  compAbility = 9 if tier == 2 else leagueAbilities[country]
  diff = ability - compAbility

  v = 1.5 if compAbility >= 14 else 1
  h = None
  if diff >= -1: h = gauss(1.5, 1.5)
  else: h = gauss(0, 2.5)

  rate = ability/compAbility
  if rate > 1: rate = 1

  mu = (number-((rate)**v)*number)+h
  sigma = 1/abs(ability/compAbility)

  position = int(round(gauss(mu,sigma),0))
  if position < 1: position = 1
  if position >= number: position = number
  return position

def leagueExpectation(country, club, tier): #how well the club expects to do in the league. this is contrasted to the true finish to determine if manager is doing a good job
  t = 'Tier1' if tier == 1 else 'Tier2'
  number = leagueNumbers[country][t] #number of teams in league
  ability = clubAbility[club]
  if ability == 0: ability = 0.5
  compAbility = 9 if tier == 2 else leagueAbilities[country]
  diff = ability - compAbility

  v = 1.5 if compAbility >= 14 else 1
  h = None
  if diff >= -1: h = 1.5
  else: h = 1

  rate = ability/compAbility
  if rate > 1: rate = 1

  position = int((number-((rate)**v)*number)+h)
  if position < 1: position = 1
  if position >= number: position = number
  return position

def matchup(ability1, ability2): #determining ther winner of a matchup between two teams
  if ability2 == 0: ability2 = 0.0001
  base = (ability1/ability2)**2
  if random() < base/2: return True
  else: return False

#international club tournaments
def continentalCompetition(competition, teamAbility):
  ability = teamAbility
  if ability >= 19: ability = 19
  if competition == 'Champions League':
    roundReached = 'Group Stage' #How far they progress
    rounds = ['Group Stage', 'Round of 16', 'Quarter Finals', 'Semi Finals', 'Final']
    roundStrengths = {'Group Stage':(uclAbility-4), 'Round of 16':(uclAbility-3), 'Quarter Finals':(uclAbility-2), 'Semi Finals':(uclAbility-1), 'Final':uclAbility}
    while True:
      M = matchup(ability, roundStrengths[roundReached])
      if M == False: return roundReached
      if M == True:
        if roundReached == 'Final': return 'Victory'
        else:
          roundReached = rounds[rounds.index(roundReached)+1]
  elif competition == 'Europa League':
    roundReached = 'Group Stage' #How far they progress
    rounds = ['Group Stage', 'Playoff Round', 'Round of 16', 'Quarter Finals', 'Semi Finals', 'Final']
    roundStrengths = {'Group Stage':(uelAbility-5), 'Playoff Round':(uelAbility-4), 'Round of 16':(uelAbility-3), 'Quarter Finals':(uelAbility-2), 'Semi Finals':(uelAbility-1), 'Final':uelAbility}
    while True:
      M = matchup(ability, roundStrengths[roundReached])
      if M == False: return roundReached
      if M == True:
        if roundReached == 'Final': return 'Victory'
        else:
          roundReached = rounds[rounds.index(roundReached)+1]
  elif competition == 'Conference League':
    roundReached = 'Group Stage' #How far they progress
    rounds = ['Group Stage', 'Playoff Round', 'Round of 16', 'Quarter Finals', 'Semi Finals', 'Final']
    roundStrengths = {'Group Stage':(ueclAbility-5), 'Playoff Round':(ueclAbility-4), 'Round of 16':(ueclAbility-3), 'Quarter Finals':(ueclAbility-2), 'Semi Finals':(ueclAbility-1), 'Final':ueclAbility}
    while True:
      M = matchup(ability, roundStrengths[roundReached])
      if M == False: return roundReached
      if M == True:
        if roundReached == 'Final': return 'Victory'
        else:
          roundReached = rounds[rounds.index(roundReached)+1]

def cupCompetition(country, teamAbility):
  ability = teamAbility
  if ability >= 19: ability = 19
  if country == 'England':
    won = []
    for comp in ['FA Cup', 'EFL Cup']:
      compStrength = cupAbilities[country]
      roundReached = 'Round of 64' #How far they progress
      rounds = ['Round of 64', 'Round of 32', 'Round of 16', 'Quarter Finals', 'Semi Finals', 'Final']
      roundStrengths = {'Round of 64':(0.5*compStrength), 'Round of 32':(0.6*compStrength), 'Round of 16':(0.7*compStrength), 'Quarter Finals':(0.8*compStrength), 'Semi Finals':(0.9*compStrength), 'Final':(1.1*compStrength)}
      while True:
        rs = roundStrengths[roundReached] if ability/roundStrengths[roundReached] <= 1.25 else 1.25 #Safeguard so win not too likely
        M = matchup(ability, rs)
        if M == False:
          won.append(roundReached)
          break
        if M == True:
          if roundReached == 'Final':
            won.append(comp)
            break
          else:
            roundReached = rounds[rounds.index(roundReached)+1]
    return won
  else: #Not England
    compStrength = cupAbilities[country]
    roundReached = 'Round of 64' #How far they progress
    rounds = ['Round of 64', 'Round of 32', 'Round of 16', 'Quarter Finals', 'Semi Finals', 'Final']
    roundStrengths = {'Round of 64':(0.5*compStrength), 'Round of 32':(0.6*compStrength), 'Round of 16':(0.7*compStrength), 'Quarter Finals':(0.8*compStrength), 'Semi Finals':(0.9*compStrength), 'Final':(1.1*compStrength)}
    while True:
        M = matchup(ability, roundStrengths[roundReached])
        if M == False: return roundReached
        if M == True:
          if roundReached == 'Final': return 'Victory'
          else:
            roundReached = rounds[rounds.index(roundReached)+1]

def smallCup(competition, teamAbility): #such as supercups, club world cups...

  if competition == 'UEFA Super Cup':
    cupAbility = uscAbility
    M = matchup(teamAbility, cupAbility)
    if M == True: return 'Victory'
    else: return 'Final'

  elif competition == 'Club World Cup':
    cupAbility = cwcAbility
    if country in europeanCountries: cupAbility -= 5
    roundReached = 'Quarter Finals' #How far they progress
    rounds = ['Quarter Finals', 'Semi Finals', 'Final']
    roundStrengths = {'Quarter Finals':(cupAbility-5), 'Semi Finals':(cupAbility-2), 'Final':(cupAbility+1)}
    while True:
        M = matchup(ability, roundStrengths[roundReached])
        if M == False: return roundReached
        if M == True:
          if roundReached == 'Final': return 'Victory'
          else:
            roundReached = rounds[rounds.index(roundReached)+1]

def promotion(club): #does club get promoted? (if in lower tiers)
  diff = clubAbility[club] - 5
  rp = randint(1, 1000)
  if diff <= -5: return False
  elif -4 <= diff <= -3:
    if rp <= 25: return True
    else: return False
  elif -2 <= diff <= -1:
    if rp <= 100: return True
    else: return False
  elif 0 <= diff <= 1:
    if rp <= 400: return True
    else: return False
  else:
    if rp <= 650: return True
    else: return False

#player will improve/get worse over course of his career
def playerGrowth(ability, seasonQuality, age, position, fitness, pace, shooting, passing, dribbling, defending, physicality, goalkeeping):
  #Age
  ageCoefficient = (-e**((age-17)/17))+3
  if ageCoefficient < 0.25: ageCoefficient = 0.25

  if position == 'goalkeeper' and age <= 23: ageCoefficient -= 0.3
  elif position == 'goalkeeper' and age >= 30: ageCoefficient += 0.3

  #Season quality
  diff = ability - (seasonQuality)
  diffCoefficient = -0.2*diff+0.5

  base = ageCoefficient*diffCoefficient if diffCoefficient >= 0 else diffCoefficient*(2/abs(ageCoefficient))
  if base < 0: base = base*2
  points = int(round(2.5*base,0))
  if position == 'goalkeeper': points = int(round(points/2.5,0))
  #Position

  P = {'goalkeeper':(0,0,0,0,1),
       'left back':(0.2,0.5,0.6,0.6,0),
       'right back':(0.2,0.5,0.6,0.6,0),
       'center back':(0.1,0.3,0.1,0.67,0),
       'left wing back':(0.27,0.5,0.6,0.55,0),
       'right wing back':(0.27,0.5,0.6,0.55,0),
       'defensive midfielder':(0.2,0.67,0.4,0.67,0),
       'central midfielder':(0.27,0.67,0.6,0.27,0),
       'attacking midfielder':(0.4,0.58,0.4,0.1,0),
       'left midfielder':(0.35,0.6,0.67,0.13,0),
       'right midfielder':(0.35,0.6,0.67,0.13,0),
       'left winger':(0.55,0.4,0.67,0.067,0),
       'right winger':(0.55,0.4,0.67,0.067,0),
       'center forward':(0.67,0.2,0.2,0.02,0)}

  ps, pp, pdr, pd, pg = P[position]
  PP = {'ds':ps,'dp':pp,'ddr':pdr,'dd':pd,'dg':pg}
  DP = sorted(PP, key=PP.get, reverse=True)
  for j in DP:
    if PP[j] == 0:
      DP.remove(j)
  D = {'ds':0,'dp':0,'ddr':0,'dd':0,'dg':0}
  N = {'ds':shooting,'dp':passing,'ddr':dribbling,'dd':defending,'dg':goalkeeping}

  if position == 'goalkeeper':
    DP = ['dg']

  i = 0
  while points != 0 and i < 10:
    if points > 0:
      for d in DP:
        if PP[d] != 0 and random() < PP[d]:
          if points > 0 and N[d] < seasonQuality:
           D[d] += 1
           points -= 1
          else: pass
        else: pass
    elif points < 0:
      for d in DP:
        if points != 0:
          D[d] -= 1
          points += 1
        else: pass
    i += 1
  #safeguard
  while points != 0:
    if points > 0:
      for d in DP:
        if PP[d] != 0 and random() < PP[d]:
          if points > 0:
           D[d] += 1
           points -= 1
          else: pass
        else: break
    elif points < 0:
      for d in DP:
        if points != 0:
          D[d] -= 1
          points += 1
        else: break

  fitnessCoefficient = fitness/10
  if fitnessCoefficient == 0: fitnessCoefficient = 0.05
  #Pace
  dpa = ageCoefficient
  if age <= 18: dpa = int(round(dpa*random(),0))
  elif 19 <= age <= 23: dpa = int(round(dpa*uniform(0,0.5),0))
  elif 24 <= age <= 30: dpa = 0
  elif 31 <= age <= 33: dpa = -int(round((1/(abs(5*ageCoefficient)*fitnessCoefficient))*uniform(0,0.5),0))
  elif 34 <= age: dpa = -int(round((1/(abs(5*ageCoefficient)*0.1*fitnessCoefficient))*uniform(0,1),0))

  #Physicality
  dph = ageCoefficient
  if age <= 18: dph = int(round(dph*random(),0))
  elif 19 <= age <= 30: dph = int(round(dph*uniform(0,0.5),0))
  elif 31 <= age <= 33: dph = -int(round((1/(5*ageCoefficient*fitnessCoefficient))*uniform(0,0.5),0))
  elif 34 <= age: dph = -int(round((1/(5*ageCoefficient*fitnessCoefficient))*uniform(0,1),0))

  return dpa, D['ds'], D['dp'], D['ddr'], D['dd'], dph, D['dg']

def changePosition(position, heightList, pace, shooting, passing, dribbling, defending, physicality, height, formationPositions, formation):
  if position == 'goalkeeper': return False
  oldPosition = position
  hi = heightList.index(height)
  it = 0
  while oldPosition == position and it < 10:
    position = getPosition(heightList, pace, shooting, passing, dribbling, defending, physicality, height, firstPosition)
    it += 1
  itp = 0
  while (position not in formationPositions[formation] or (oldPosition!='goalkeeper' and position == 'goalkeeper') or (position == 'center back' and hi <= 6)) and itp < 10:
      position = getPosition(heightList, pace, shooting, passing, dribbling, defending, physicality, height, firstPosition)
      itp += 1
  if position not in formationPositions[formation]:
     Alist = {}
     for p in formationPositions[formation]:
       A = calculateAbility(p, pace, shooting, passing, dribbling, defending, physicality, goalkeeping)
       Alist[p] = A
     H = max(Alist.values())
     J = dict()
     for j in Alist: J[Alist[j]] = j
     position = J[H]

  if position != oldPosition and calculateAbility(position, pace, shooting, passing, dribbling, defending, physicality, goalkeeping) >= 0.85*calculateAbility(oldPosition, pace, shooting, passing, dribbling, defending, physicality, goalkeeping):
    return position, oldPosition
  else: return False

def captaincy(ability, age, leadership, yearsAtClub, club):
  if yearsAtClub <= 0: return False

  base = 1

  abDiff = ability - clubAbility[club]
  abilityCoefficient = -e**(-0.1*abDiff+0.2)+2

  ageCoefficient = -e**-(0.1*age-0.2)+1.25

  lsCoefficient = e**(0.1*(leadership-10))-0.5

  yacCoefficient = e**(0.1*(yearsAtClub-4))-0.65

  base = base*abilityCoefficient*ageCoefficient*lsCoefficient*yacCoefficient
  if random() <= base: return True
  else: return False

def natCaptaincy(ability, age, leadership, nationalTeamStartYear, currentYear, nationality):
  yearsInTeam = currentYear - nationalTeamStartYear
  if yearsInTeam <= 0 or nationalTeamAppearances < 30: return False

  base = 1

  abDiff = ability - natAbility[nationality]
  abilityCoefficient = -e**(-0.075*abDiff+0.15)+1.75

  ageCoefficient = -e**-(0.1*age-0.2)+1.25

  lsCoefficient = e**(0.1*(leadership-10))-0.5

  yacCoefficient = e**(0.1*(yearsAtClub-4))-0.65

  base = base*abilityCoefficient*ageCoefficient*lsCoefficient*yacCoefficient
  if random() <= base: return True
  else: return False

def europeanQualifying(competition, club):
  ability = clubAbility[club]
  compAbility = None
  if competition == 'Champions League': compAbility = uclAbility
  elif competition == 'Europa League': compAbility = uelAbility
  elif competition == 'Conference League': compAbility = ueclAbility

  diff = ability - compAbility
  N = e**(-0.1*(diff+5))-0.6
  if random() > N: return True

  return False

#Does club qualify for European competitions
def isInEurope(club, country, leaguePosition, cupWinner, uclWinner, uelWinner, ueclWinner, tier):
  if country not in europeanCountries: return False

  highest = None #Highest tier of european competition qualified for

  if type(cupWinner)==list:
    if 'W1' in cupWinner: highest = 'Europa League'
    if 'W2' in cupWinner:
      if highest != 'Europa League': highest = 'Conference League'
  else:
    if cupWinner ==  True: highest = 'Europa League'

  if (uclWinner or uelWinner) == True: highest = 'Champions League'
  elif ueclWinner == True: highest = 'Europa League'


  if tier == 2: return None
  if country in uclAutoSpots and leaguePosition in uclAutoSpots[country]: highest = 'Champions League'
  if country in uclQualifyingSpots and leaguePosition in uclQualifyingSpots[country]:
    if europeanQualifying('Champions League', club) == True: highest = 'Champions League'

  if country in uelAutoSpots and leaguePosition in uelAutoSpots[country] and highest != 'Champions League': highest = 'Europa League'
  if country in uelQualifyingSpots and leaguePosition in uelQualifyingSpots[country]:
    if europeanQualifying('Europa League', club) == True and highest != 'Champions League': highest = 'Europa League'

  if country in ueclAutoSpots and leaguePosition in ueclAutoSpots[country] and highest not in ['Champions League', 'Europa League']: highest = 'Conference League'
  if country in ueclQualifyingSpots and leaguePosition in ueclQualifyingSpots[country]:
    if europeanQualifying('Conference League', club) == True and highest not in ['Champions League', 'Europa League']: highest = 'Conference League'

  if highest in ['Champions League', 'Europa League', 'Conference League']: return highest
  else: return None

def pots(easonQuality, country, tier): #named player of the season?
  leagueStrength = 9 if tier == 2 else leagueAbilities[country]
  diff = seasonQuality-leagueStrength
  if diff <= 0: return False
  if leagueStrength <= 13: leagueStrength += randint(1,3)

  base = (e**(diff/28))-0.9
  if random() < base: return True
  else: return False

def tots(easonQuality, country, tier): #named into team of the season?
  leagueStrength = 9 if tier == 2 else leagueAbilities[country]
  diff = seasonQuality-leagueStrength
  if leagueStrength <= 13: leagueStrength += randint(1,3)

  base = (e**((diff+2)/20))-0.95
  if random() < base: return True
  else: return False

def potm(seasonQuality, country, tier): #player of the month?
  leagueStrength = 9 if tier == 2 else leagueAbilities[country]
  diff = seasonQuality-leagueStrength

  base = (e**(diff/6))-0.75
  sigma = 3*abs(base)
  if sigma >= 0.5: sigma = 0.5
  count = int(gauss(base, sigma))
  if count < 0: count = 0
  return count

def golden(seasonQuality, totalGoals, position, country, tier, club, leaguePosition): #golden glove/boot
  t = 'Tier1' if tier == 1 else 'Tier2'
  if position == 'goalkeeper': #Golden glove
    if leaguePosition < (0.4*len(clubsDictionary[country][t])-2): return False
    leagueStrength = 9 if tier == 2 else leagueAbilities[country]
    ratio = clubAbility[club]/leagueStrength
    base = 1
    ratioModifier = None
    if ratio >= 0.9: ratioModifier = 3*ratio-2.5
    else: ratioModifier = 0
    sqMod = None
    f = seasonQuality/leagueStrength
    sqMod = 2.5*f-1.5
    if random() < base*ratioModifier*sqMod: return True
    else: return False
  else: #Golden boot
    games = (2*leagueNumbers[country][t])-2
    gpg = goals/games
    if random() < (e**(gpg/1.1))-1.5 and gpg >= 0.55: return True
    else: return False

def sackedInTheMorning(country, club, managerAbility, leaguePosition): #manager fired
  ability = clubAbility[club]
  expectation = leagueExpectation(country, club, tier)
  diff = expectation - leaguePosition
  diff2 = managerAbility - ability

  lMod = 0.1*diff + 1.01
  mMod = (e**((0.5*diff2)-2))+0.1*diff2+1

  if random() < (1-lMod*mMod): return True
  else: return False

def managerPoached(country, club, managerAbility, leaguePosition): #Bigger club recruits manager
  ability = clubAbility[club]
  expectation = leagueExpectation(country, club, tier)
  diff = expectation - leaguePosition
  mAbility = managerAbility if managerAbility <= 20 else 20
  diff2 = mAbility - ability

  lMod = 0.1*diff + 1.01
  mMod = (e**((0.5*diff2)-2))+0.1*diff2+1

  METER = lMod*mMod/20
  ab = ability if ability != 0 else 0.5
  if (mAbility/ab) <= 1.4 or ability >= 17 : METER = METER/5

  if random() < METER: return True
  else: return False

def getFirstNationLeague(nation): #what tier in the nations league the nation starts in
  ability = natAbility[nation]
  base = (-0.2*ability+4)*gauss(1,0.5)
  if base < 0.5: base = 1
  if base >= 4.5: base = 4
  lDict = {1:'A', 2:'B', 3:'C', 4:'D'}
  return lDict[int(round(base,0))]

#Vault of stuff that gets printed at the end of the season
def printPerSeason(seasonQuality, seasonQualities, madeWinterTransfer, uscProgression, cwcProgression, potmc, potsc, totsc, country, leaguePosition, cupCampaign, continentalProgression, wonPromotion, sufferedRelegation, wcProgression, ecProgression, nlProgression, nationLeague, caProgression, afconProgression, acProgression, gcProgression, lastName, club):
  STRING = ''
  if type(continentalProgression) == int: continentalProgression = [0] #safeguard

  uscBank = {'Victory':[f'{club} started the season well by winning the UEFA Super Cup.', f'{club} had a bright start to their season, as they were victorious in the UEFA Super Cup.'], 'Defeat':[f'{club} kicked off their season by competing for the UEFA Super Cup, losing in the process.', f"{club} couldn't have the perfect start to the season, as they lost in the UEFA Super Cup."]}
  cwcBank = {'Victory':[f'{club} competed in and won the Club World Cup midway through the season', f'{club} had a jolly February, as the club was victorious in the Club World Cup.'], 'Final':[f'{club} lost the Club World Cup final.'], 'Semi Finals':[f"{club} couldn't make it further than the Semi Finals of the Club World Cup in February.", f"A Semi Final finish was all {club} could muster in the Club World Cup."], 'Quarter Finals':[f"{club} couldn't make it further than the Quater Finals of the Club World Cup in February.", f"A Quarter Final finish was all {club} could muster in the Club World Cup."]}
  dsqBank = {'huge drop':[f'{lastName} had an awful drop in form compared to the season prior.'], 'drop':[f"The following season, there was a noticable drop in {lastName}’s form."], 'similar':[f'{lastName} had a similar season on a personal level.', f'It was a normal season for {lastName}, personally speaking.'], 'improvement':[f"{lastName} improved noticably on last season’s form."], 'huge improvement':[f"{lastName} grabbed headlines with a massive personal season."]}
  fsBank = {'low':[f'{lastName} had his first season in professional football.'], 'medium':[f"{lastName}'s first season as a professional footballer was an impressive one."], 'high':[f'{lastName} made a name for himself already, in only the first season of his career, with great performances.']}
  leagueBank = [f'{club} placed {leaguePosition}. in the league.', f'{club} finished in {leaguePosition}. place in {leagueNames[country][t]}.']
  potmBank = [f'{lastName} impressed enough to win {potmc}x Player of the Month awards.', f'Over the course of the season, {lastName} won {potmc}x Player of the Month Awards.']
  potsBank = [f'{lastName} had the honor to be named the {leagueNames[country][t]} Player of the Season.', f'{lastName} was named the Player of the Season of {leagueNames[country][t]}.']
  totsBank = [f'For his impressive season, {lastName} was named in the {leagueNames[country][t]} Team of the Season.', f'Thanks to his efforts, {lastName} was named in the {leagueNames[country][t]} Team of the Season.']
  cupWinBank = [f'In the {cupNames[country]}, {club} was victorious.', f'{club} won the {cupNames[country]}.']
  cupLossBank = [f'{club} reached the {cupCampaign} in the {cupNames[country]}.', f'{club} was knocked out in the {cupCampaign} of the {cupNames[country]}.']
  continentalBank = {'Victory':[f"{lastName} won the {continentalProgression[0]} with {club}.", f"{club} was victorious in the {continentalProgression[0]}."], 'Final':[f"{club} lost the {continentalProgression[0]} final.", f"{lastName} suffered a heartbreaking loss in the final of the {continentalProgression[0]} with {club}."], 'Semi Finals':[f"{club} lost in the semi finals of {continentalProgression[0]}."], 'Quarter Finals':[f"{club}'s {continentalProgression[0]} run ended in the quarter finals."], 'Round of 16':[f"{club} was knocked out of the {continentalProgression[0]} at the round of 16 stage."], 'Playoff Round':[f"{club} lost in the playoff round of the {continentalProgression[0]} following the group stage."], 'Group Stage':[f"{club} couldn't make it out of their {continentalProgression[0]} group."]}
  promotionBank = [f"{club} won promotion to the {tier}. tier of football in {country}."]
  relegationBank = [f"{club} was relegated to the {tier}. tier of football in {country}."]
  wcWinBank = [f"{lastName} won the World Cup with {nationality}.", f"{nationality} won the World Cup."]
  wcLossBank = [f"{lastName} was knocked out of the World Cup with {nationality} in the {wcProgression}."]
  ecWinBank = [f"{lastName} won the Euros with {nationality}.", f"{nationality} won the Euros."]
  ecLossBank = [f"{lastName} was knocked out of the Euros with {nationality} in the {ecProgression}."]
  afconWinBank = [f"{lastName} won the African Cup of Nations with {nationality}.", f"{nationality} won the African Cup of Nations."]
  afconLossBank = [f"{lastName} was knocked out of the African Cup of Nations with {nationality} in the {afconProgression}."]
  acWinBank = [f"{lastName} won the Asian Cup with {nationality}.", f"{nationality} won the Asian Cup."]
  acLossBank = [f"{lastName} was knocked out of the Asian Cup with {nationality} in the {acProgression}."]
  gcWinBank = [f"{lastName} won the Gold Cup with {nationality}.", f"{nationality} won the Gold Cup."]
  gcLossBank = [f"{lastName} was knocked out of the Gold Cup with {nationality} in the {gcProgression}."]

  if uscProgression != None and madeWinterTransfer == False: #Competed in UEFA Super Cup
    STRING += (' ' + (choice(uscBank[uscProgression])))

  if cwcProgression != None and madeWinterTransfer == False: #Competed in Club World Cup
    STRING += (' ' + (choice(cwcBank[cwcProgression])))

  #Season quality stuff
  if len(seasonQualities) == 1: #If first season
    fsi = None
    if seasonQuality in [0,1,2,3,4,5,6]: fsi = 'low'
    elif seasonQuality in [7,8,9,10,11,12,13]: fsi = 'medium'
    else: fsi = 'high'
    STRING += (' ' + (choice(fsBank[fsi])))
  else:
    lastSeasonQuality = seasonQualities[len(seasonQualities)-2]
    dsq = seasonQuality-lastSeasonQuality
    dsqi = None
    if dsq in [-1,0,1]: dsqi = 'similar'
    elif dsq == 2: dsqi = 'improvement'
    elif dsq > 2: dsqi = 'huge improvement'
    elif dsq == -2: dsqi = 'drop'
    else: dsqi = 'huge drop'
    STRING += (' ' + (choice(dsqBank[dsqi])))

  #League
  STRING += (' ' + (choice(leagueBank)))

  #Personal awards (other than ballon dor)
  if potmc >= 1: STRING += (' ' + (choice(potmBank)))
  if potsc == True: STRING += (' ' + (choice(potsBank)))
  if totsc == True: STRING += (' ' + (choice(totsBank)))

  #Cup(s)
  if len(cupNames[country]) > 1:
      if country == 'England':
        if 'FA Cup' in cupCampaign and 'EFL Cup' not in cupCampaign:
          STRING += f' They were victorious the FA Cup but were knocked out in the {cupCampaign[1]} in the EFL Cup.'
        elif 'FA Cup' not in cupCampaign and 'EFL Cup'  in cupCampaign:
          STRING += f' They were victorious the EFL Cup but were knocked out in the {cupCampaign[0]} in the FA Cup.'
        elif 'FA Cup'  in cupCampaign and 'EFL Cup'  in cupCampaign:
          STRING += f' They were victorious in both the FA Cup and the EFL Cup.'
        elif 'FA Cup' not in cupCampaign and 'EFL Cup' not in cupCampaign:
          STRING += f' They reached the {cupCampaign[0]} in the FA Cup and the {cupCampaign[1]} in the EFL Cup.'
      else:
        if cupCampaign == 'Victory':
          STRING += (' ' + (choice(cupWinBank)))
        else: STRING += (' ' + (choice(cupLossBank)))

  #Continental
  if continentalProgression not in [0,[0]]: STRING += (' ' + (choice(continentalBank[continentalProgression[1]])))

  #Promotion/Relegation
  if wonPromotion == True: STRING += (' ' + (choice(promotionBank)))
  if sufferedRelegation == True: STRING += (' ' + (choice(relegationBank)))

  #International
  if wcProgression != None:
    if wcProgression == 'Victory': STRING += (' ' + (choice(wcWinBank)))
    elif wcProgression not in ['Victory', 'dnq']: STRING += (' ' + (choice(wcLossBank)))
    else: STRING += (f' {nationality} failed to qualify for the World Cup.')

  if ecProgression != None:
    if ecProgression == 'Victory': STRING += (' ' + (choice(ecWinBank)))
    elif ecProgression not in ['Victory', 'dnq']: STRING += (' ' + (choice(ecLossBank)))
    else: STRING += (f' {nationality} failed to qualify for the Euros.')

  if afconProgression != None:
    if afconProgression == 'Victory': STRING += (' ' + (choice(afconWinBank)))
    elif afconProgression not in ['Victory', 'dnq']: STRING += (' ' + (choice(afconLossBank)))
    else: STRING += (f' {nationality} failed to qualify for the African Cup of Nations.')

  if acProgression != None:
    if acProgression == 'Victory': STRING += (' ' + (choice(acWinBank)))
    elif acProgression not in ['Victory', 'dnq']: STRING += (' ' + (choice(acLossBank)))
    else: STRING += (f' {nationality} failed to qualify for the Asian Cup.')

  if gcProgression != None:
    if gcProgression == 'Victory': STRING += (' ' + (choice(gcWinBank)))
    elif gcProgression not in ['Victory', 'dnq']: STRING += (' ' + (choice(gcLossBank)))
    else: STRING += (f' {nationality} failed to qualify for the Gold Cup.')

  if nlProgression != None:
      if nlProgression == 'Victory':
        STRING += f' {lastName} won the Nations League with {nationality}!'
      elif nlProgression == 'no change' or nlProgression == 'Group Stage': STRING += f' {nationality} finished mid table in League {nationLeague} of the Nations League.'
      elif nlProgression in ['Semi Finals', 'Final']: STRING += f' {nationality} was knocked out of the Nations League in the {nlProgression}.'
      else:
        STRING += f' {nationality} was {nlProgression} in the Nations League, and will next compete in League {nationLeague}.'

  if caProgression != None:
      if caProgression == 'Victory':
        STRING += f' {lastName} won the Copa America with {nationality}!'
      else:
        STRING += f' {nationality} reached the {caProgression} in the Copa America.'

  return str(STRING)

def retire(age, fitness, ability, club): #Check if player retires
  if age <= 31 and randint(1, 50) != 50: return False

  cAbility = clubAbility[club]

  ageModifier = e**(0.4*(age-38))

  fitModifier = e**(-0.5*(fitness))-0.05*fitness+1.3

  diff = ability - cAbility
  abiModifier = e**(-(diff+14))+0.45-0.05*diff

  base = ageModifier*fitModifier*abiModifier
  if random() < base: return True
  else: return False

def directory():
    print(f"\n------------------------------\n Here are some optional commands that you can enter into the commandline.\n stats <- Prints player's stats \n print x <- Prints variable 'x' (e.g. print diligence)\n nat x <- Makes the nationality of the player 'x' (only possible at start)\n FN/LN x <- makes the first/last name of the player 'x' (only possible at start)\n pc/sh/pa/dr/de/ph/go x <-makes the pace/shooting/passing/dribbling/defending/physicality/goalkeeping of the player 'x' (only possible at the start)\n q <- simulates the career all at once \n------------------------------\n")

#####################################################################################################################FUNCTIONS END

print("Welcome to Turf 7! This program generates the whole career of a randomly generated football player, from clubs, to goals \nand more!")
i = input("Press enter button to generate the player's career! Enter 'Directory' into commandline for various optional instructions.\n")

if 'Directory' in i:
  directory()

#CLUB STATS
clubs = dict() #Dictionary that stores the player's clubs
clubJoinedYears = dict() #Dictionary that stores the year at which the player joined each of his clubs
clubLeftYears = dict() #Dictionary that stores the year at which the player left each of his clubs, loans away not counted
clubAppearances = dict() #Dictionary that stores appearances at each club
clubGoals = dict() #Dictionary that stores goals at each club
clubAssists = dict() #Dictionary that stores assists at each club

honors = dict() #Dictionary that stores trophies won
individualHonors = dict() #Dictionary that stores individual achievements
bestSeasons = dict() #Dictionary that stores the player's best personal seasons, if he had any (9 and 10 season quality barrier of entry)
nbs = 0 #counts the number of best seasons

#Important data
STARTSTRING = '' #The string that gets printed at the start

##STATS##
pace = int(round(gauss(10,4),0))
while pace < 0: pace = int(round(gauss(10,5),0))

shooting = int(round(gauss(2,2),0))
while shooting < 0: shooting = int(round(gauss(4, 4),0))

passing = int(round(gauss(2,2),0))
while passing < 0: passing = int(round(gauss(4, 4),0))

dribbling = int(round(gauss(2,2),0))
while dribbling < 0: dribbling = int(round(gauss(4, 4),0))

defending = int(round(gauss(2,2),0))
while defending < 0: defending = int(round(gauss(4, 4),0))

physicality = int(round(gauss(6,3),0))
while physicality < 0: physicality = int(round(gauss(6, 4),0))

#
goalkeeping = int(round(gauss(2,3),0)) #only used if turns out to be a goalkeeper
while goalkeeping < 0: goalkeeping = int(round(gauss(2, 3),0))
##

heightList = ['5 ft 3 in', '5 ft 4 in', '5 ft 5 in', '5 ft 6 in', '5 ft 7 in', '5 ft 8 in', '5 ft 9 in', '5 ft 10 in', '5 ft 11 in', '6 ft', '6 ft 1 in', '6 ft 2 in', '6 ft 3 in', '6 ft 4 in', '6 ft 5 in', '6 ft 6 in', '6 ft 7 in']
height = None
heightIndex = -1
while heightIndex < 0 or heightIndex > 16:
  heightIndex = int(round(gauss(8,3.5),0))

height = heightList[heightIndex]
nationality = getNationality()
nationLeague = None #European countries only in nation's league
if nationality in europeanCountries:
  nationLeague = getFirstNationLeague(nationality)
#
firstName, lastName = choice(FN[nationality.upper()]), choice(LN[nationality.upper()])
preferredFoot = 'right' if randint(1,10) != 10 else 'left'
positionsList = ['goalkeeper', 'left back', 'left wing back', 'center back', 'right back', 'right wing back', 'defensive midfielder', 'central midfielder', 'attacking midfielder',' left midfielder', 'right midfielder', 'left winger', 'right winger', 'center forward']
firstPosition = None
position = getPosition(heightList, pace, shooting, passing, dribbling, defending, physicality, height, firstPosition)
firstPosition = position
formerPositions = list()
demand = None #Changes after each season, how in demand the player is
ability = calculateAbility(position, pace, shooting, passing, dribbling, defending, physicality, goalkeeping) #Overall ability

#safeguard
if position != 'goalkeeper': goalkeeping = -100
else: shooting, passing, dribbling, defending, = 0,0,0,0

#Other attributes
diligence = int(round((gauss(50, 25)/5),0)) #How hard working the player is
while diligence < 0: diligence = int(round((gauss(50, 15)/5),0))

loyalty = int(round((gauss(50, 25)/5),0)) #How likely the player is to remain at his club
while loyalty < 0: loyalty = int(round((gauss(50, 15)/5),0))

fitness = int(round((gauss(50, 25)/5),0)) #How unlikely to get injured
while fitness < 0: fitness = int(round((gauss(50, 15)/5),0))

versitility = int(round((gauss(50, 25)/5),0)) #How likely to play different positions
while versitility < 0: versitility = int(round((gauss(50, 15)/5),0))

leadership = int(round((gauss(50, 25)/5),0)) #How good a leader, likelyhood to be captain
while leadership < 0: leadership = int(round((gauss(50, 15)/5),0))

greed = int(round((gauss(50, 25)/5),0)) #A personality range that affects wage demands
while greed < 0: greed = int(round((gauss(50, 15)/5),0))

numberOfClubs = 1 #Starts at 1 but will likely increase
currentClubId = 1
birthYear = randint(1970,2006)
birthHalf = randint(1, 2) #If born in first or second half of year
careerStartAge = int(round(gauss(17.5,1),0))
if careerStartAge < 16: careerStartAge = 16
careerStartYear = birthYear + careerStartAge
currentYear = careerStartYear #Keeps track of the current year
age = careerStartAge
lastFee = 0 #how much they cost in their last transfer

personalityTraits = list()
ptm = {'diligence':'Lazy', 'loyalty':'Disloyal', 'greed':'Greedy'}
ptg = {'diligence':'Diligent', 'loyalty':'Loyal', 'greed':'Generous'}
for j in ['diligence', 'loyalty', 'greed']:
  if eval(j) <= 5: personalityTraits.append(ptm[j])
  elif eval(j) >= 15: personalityTraits.append(ptg[j])

#Adding personality traits
for j in [1,2,3,4]:
  r = random()
  if r <= 0.1:
    if j == 1: personalityTraits.append('Proud')
    elif j == 2: personalityTraits.append('Wrathful')
    elif j == 3: personalityTraits.append('Envious')
    elif j == 4: personalityTraits.append('Anxious')
  if r >= 0.9:
    if j == 1: personalityTraits.append('Humble')
    elif j == 2: personalityTraits.append('Calm')
    elif j == 3: personalityTraits.append('Kind')
    elif j == 4: personalityTraits.append('Stoic')

yearsAtClub = 0 #A variable that counts how many years the player has been at whichever club they are currently at
club = getFirstClub(nationality, ability)
tier = None #Keeping track of the tier the club plays in
seasonQualities = [] #Stores all of the player's career season qualities
value = getValue(age, ability, country, tier, seasonQualities) #Financial player value
wages = 0 #Weekly wages of player
role = 0 #Role at club
contract = int(round(gauss(3,0.5),0)) #How much left on deal
while contract < 1: contract = int(round(gauss(3,0.5),0))

loanClubs = []
parentClub = None #If a player leaves on loan, this is the club they return to
parentClubId = -1 #The number of clubs Id for parent clubs
loanee = False #Triggered when a player is a loanee
yearsLeftOnLoan = 0 #Keeping track of loan length
unPlayedSeasonsParentClub = 0

#Captaincy
captain = False #Captain of club or not
natCaptain = False #Captain of nation or not

##Checking input to see if any stats are specified

quickfire = False #If it is a quickfire simulation or not
if i:
  changeFlag = False
  posAlreadyChanged = False
  ilist = i.split()
  ipos = {'gk':'goalkeeper', 'lwb':'left wing back', 'lb':'left back', 'cb':'center back', 'rwb':'right wing back', 'rb':'right back', 'dm':'defensive midfielder', 'cm':'central midfielder', 'am':'attacking midfielder', 'rw':'right winger', 'lw':'left winger', 'cf':'center forward'}
  posintersection = str((set(ilist)&set(['gk', 'lwb', 'lb', 'cb', 'rwb', 'rb', 'dm', 'cm', 'am', 'rw', 'lw', 'cf']))).replace("{",'').replace("}",'').replace("'",'')
  iheight = {53:'5 ft 3 in', 54:'5 ft 4 in', 55:'5 ft 5 in', 56:'5 ft 6 in', 57:'5 ft 7 in', 58:'5 ft 8 in', 59:'5 ft 9 in', 510:'5 ft 10 in', 511:'5 ft 11 in', 6:'6 ft', 61:'6 ft 1 in', 62:'6 ft 2 in', 63:'6 ft 3 in', 64:'6 ft 4 in', 65:'6 ft 5 in', 66:'6 ft 6 in', 67:'6 ft 7 in'}
  if posintersection != 'set()':
    posAlreadyChanged = True
    position = ipos[posintersection]
    if position == 'goalkeeper':
      goalkeeping = int(round(gauss(2,3),0))
      while goalkeeping < 2: goalkeeping = int(round(gauss(2, 3),0))
      shooting, passing, dribbling, defending, = 0,0,0,0
  if 'pc' in ilist:
    pace = int(ilist[ilist.index('pc')+1])
    changeFlag = True
  if 'sh' in ilist:
    shooting = int(ilist[ilist.index('sh')+1])
    changeFlag = True
  if 'pa' in ilist:
    passing = int(ilist[ilist.index('pa')+1])
    changeFlag = True
  if 'dr' in ilist:
    dribbling = int(ilist[ilist.index('dr')+1])
    changeFlag = True
  if 'de' in ilist:
    defending = int(ilist[ilist.index('de')+1])
    changeFlag = True
  if 'ph' in ilist:
    physicality = int(ilist[ilist.index('ph')+1])
    changeFlag = True
  if 'go' in ilist:
    goalkeeping = int(ilist[ilist.index('h')+1])
    changeFlag = True
  if 'h' in ilist:
    ih = int(ilist[ilist.index('h')+1])
    height = iheight[ih]
    changeFlag = True
  if 'q' in ilist: quickfire = True
  if 'l' in ilist: loyalty = int(ilist[ilist.index('l')+1])
  if 'lead' in ilist: leadership = int(ilist[ilist.index('lead')+1])
  if 'd' in ilist: diligence = int(ilist[ilist.index('d')+1])
  if 'f' in ilist: fitness = int(ilist[ilist.index('f')+1])
  if 'v' in ilist: versitility = int(ilist[ilist.index('v')+1])
  if 'nat' in ilist or 'usa' in ilist:
    if 'usa' not in ilist: nationality = str(ilist[ilist.index('nat')+1])
    else: nationality = 'The United States of America'
    club = getFirstClub(nationality, ability)
    firstName = choice(FN[nationality.upper()])
    lastName = choice(LN[nationality.upper()])
    if nationality in europeanCountries:
      nationLeague = getFirstNationLeague(nationality)
    else: nationLeague = None
  if 'c' in ilist: club = str(ilist[ilist.index('c')+1])
  if 'fn' in ilist: firstName = str(ilist[ilist.index('fn')+1])
  if 'ln' in ilist: lastName = str(ilist[ilist.index('ln')+1])

  if changeFlag == True:
    firstPosition = None
    if posAlreadyChanged == False: position = getPosition(heightList, pace, shooting, passing, dribbling, defending, physicality, height, firstPosition)
    firstPosition = position
    if position == 'goalkeeper': goalkeeping = int(round(gauss(2,3),0)) #only used if turns out to be a goalkeeper

  ability = calculateAbility(position, pace, shooting, passing, dribbling, defending, physicality, goalkeeping) #Overall ability

##

country = None #Keeping track of the country the player plays in
for c in countriesWithLeague:
  if numberOfTiers[c] == 1:
    if club in clubsDictionary[c]["Tier1"]:
      country = c
      tier = 1
  if numberOfTiers[c] == 2:
    if club in clubsDictionary[c]["Tier1"]:
      country = c
      tier = 1
    if club in clubsDictionary[c]["Tier2"]:
      tier = 2
      country = c

t = 'Tier1' if tier == 1 else 'Tier2'


#determining manager info
mFN, mLN, managerNationality, managerAbility, formation = getManager(club, country)
fomationsList = ['442','433 (flat)','433 (def)','433 (atk)','4231','4411','4222','4321','352','343','541','532']
formationPositions = {'442':['goalkeeper', 'center back', 'center forward', 'central midfielder', 'left back', 'right back', 'left midfielder', 'right midfielder'],'433 (flat)':['goalkeeper', 'center back', 'center forward', 'central midfielder', 'left back', 'right back', 'left winger', 'right winger'],'433 (def)':['goalkeeper', 'center back', 'center forward', 'central midfielder', 'left back', 'right back', 'defensive midfielder', 'right winger', 'left winger'],'433 (atk)':['goalkeeper', 'center back', 'center forward', 'central midfielder', 'left back', 'right back', 'attacking midfielder', 'left winger', 'right winger'],'4231':['goalkeeper', 'center back', 'center forward', 'left midfielder', 'right midfielder', 'defensive midfielder', 'attacking midfielder', 'left back', 'right back'],'4411':['goalkeeper', 'center back', 'center forward', 'central midfielder', 'left back', 'right back', 'left midfielder', 'right midfielder', 'attacking midfielder'],'4222':['goalkeeper', 'center back', 'center forward', 'left back', 'right back', 'defensive midfielder', 'attacking midfielder'],'4321':['goalkeeper', 'center back', 'center forward', 'central midfielder', 'left back', 'right back', 'defensive midfielder', 'attacking midfielder'],'352':['goalkeeper', 'center back', 'center forward', 'left midfielder', 'right midfielder', 'central midfielder', 'defensive midfielder'],'343':['goalkeeper', 'center back', 'center forward', 'left winger', 'right winger', 'central midfielder', 'left midfielder', 'right midfielder'],'541':['goalkeeper', 'center back', 'center forward', 'left midfielder', 'right midfielder', 'left wing back', 'right wing back', 'central midfielder'],'532':['goalkeeper', 'center back', 'center forward', 'central midfielder', 'left wing back', 'right wing back', 'defensive midfielder']}
itp = 0
while position not in formationPositions[formation] and itp < 10:
  position = getPosition(heightList, pace, shooting, passing, dribbling, defending, physicality, height, firstPosition)
  itp += 1
if position not in formationPositions[formation]:
  Alist = {}
  for p in formationPositions[formation]:
    A = calculateAbility(p, pace, shooting, passing, dribbling, defending, physicality, goalkeeping)
    Alist[p] = A
  H = max(Alist.values())
  J = dict()
  for j in Alist: J[Alist[j]] = j
  position = J[H]


clubJoinedYears[1] = careerStartYear
clubs[1] = club
totalAppearances = 0
totalGoals = 0
totalAssists = 0
totalHonorsWon = 0 #This goes up when player wins trophies
totalIndividualHonorsWon = 0 #This goes up when player wins individual honors

nationalTeam = False #Boolean that tells whether player represents their nation
nationalTeamAppearances = 0
nationalTeamGoals = 0
nationalTeamAssists = 0
nationalTeamStartYear = 0
latestNatApp = 0 #The latest year in which the player made appearances for the national team
#Just making sure these start at 0
natApp = 0
natGoals = 0
natAssists = 0
#
retiredFromNT = False
wcYears = list(range(1986, 2046, 4))
euroYears = list(range(1988, 2044, 4))
nlYears = list(range(1987, 2047, 2))
afconYears = list(range(1986, 2046, 4))
copamYears = list(range(1988, 2044, 4))
goldcupYears = list(range(1987, 2043, 4))
asiancupYears = list(range(1987, 2043, 4))

#
teamAbility = int((2/3)*clubAbility[club]+(1/3)*managerAbility)
leaguePosition = leagueSeason(country, teamAbility, tier) #Where the club last placed in the league
cupWinner = False #True if won the cup last season
uclWinner = False
uelWinner = False
ueclWinner = False
continentalProgression = 0
cupCampaign = 0
uscProgression = None
cwcProgression = None

#Goat
goatSeason = False #If a >=18 ability player has a really good season, they could have a so-called goat season which makes winning the ballon d'Or more likely
gtc = 0 #Counts number of goat seasons a player has had
goat = False #If player reaches 3 goat seasons, this is triggered, meaning they are one of the greatest of all time level

#Misc
unplayedSeasons = 0 #Counter that counts if a player played 10 or fewer games for his club. If this happpens two years in a row, he get's a transfer away regardless of loyalty or anything else.
littlePlayedSeasons = 0 #Counter that counts if a player played 20 or fewer games for his club. If this happpens three years in a row, he get's a transfer away regardless of loyalty or anything else.
wonPromotion = False
sufferedRelegation = False
lastContract = currentYear #Last year in which player signed a contract extension

appearances = 0 #0 at the start

firstPosition = position
STARTSTRING += choice([f" Your player was born in {nationality} in the year {birthYear}. His name was {firstName} {lastName}, he was {height} tall, {preferredFoot}-footed and he played as a {position}."])
STARTSTRING += choice([f" He came through the academy of {club}, who play in the {tier}. tier in {country} under the management of {mFN} {mLN} from {managerNationality}."])

if len(personalityTraits)>0:
  STARTSTRING += choice([f" {lastName}'s personality:"])
  for p in personalityTraits:
    if len(personalityTraits) != 1:
      if personalityTraits.index(p) != (len(personalityTraits)-1): STARTSTRING+=(f' {p.lower()},')
      else: STARTSTRING+= (f' and {p.lower()}.')
    else: STARTSTRING += (f' {p.lower()}.')
else: print('')

#Printing start string
STSL = STARTSTRING.split()
lcl = 100 #Letter count per line
currentLine = ''
for word in STSL:
  if len(currentLine) + (len(word)/2) < lcl:
    print(word, end = ' ')
    currentLine += word
  else:
    currentLine = word
    print(word)

print()

###################
#CAREER SIMULATION#
###################

while True:
  if quickfire == False:
    interval = input() #Does nothing but pause between each season
    intvList = interval.split()
    while len(intvList) != 0: #Lets you carry out commands in between seasons
      if 'print' in intvList:
        try: print(eval(intvList[intvList.index('print')+1]))
        except: pass
      if 'stats' in intvList: print(f'Pace:{pace}, Shooting:{shooting}, Passing:{passing}, Dribbling:{dribbling}, Defending:{defending}, Physicality:{physicality}')
      if 'Directory' in intvList:
        directory()
      Q = False
      if 'q' in intvList:
        Q = True
        quickfire = True
        intvList = []
      if Q == False:
        interval = input() #Does nothing but pause between each season
        intvList = interval.split()

  if quickfire == False: print('----------------------------------------------------------------------------------------------------------------------')

  #STARTS JUNE 1
  age = currentYear-birthYear
  if birthHalf == 2: age -= 1

  ####
  SEASONSTRING = '' #The string that gets printed at the end of the season

  #Demand
  value = getValue(age, ability, country, tier, seasonQualities)
  #
  goals = 0
  assists = 0

  seasonQuality = getSeasonQuality(ability, diligence, age, fitness)
  seasonQualities.append(seasonQuality)
  role = getRole(ability, club, seasonQuality, role, clubAbility)
  demand = getDemand(ability, age, seasonQuality, goals, assists)

  C = contractNegotiations(demand, club, age, contract, loyalty, role, yearsAtClub, lastContract, currentYear, captain)
  if C[0] == True and currentYear-careerStartYear!=0:
    contract += C[1]
    lastContract = currentYear
    if quickfire == False:
      SEASONSTRING += str(choice([f' {lastName} extended his contract at {parentClub} by {C[1]} years, his deal is now {contract} years long.']))
  ####

  #Captaincy?
  if captain == False:
    if captaincy(ability, age, leadership, yearsAtClub, club) == True and role == 'starter':
      captain = True
      if quickfire == False:
        SEASONSTRING += str(choice([f' {lastName} was named the captain of {club}.']))

  #Position change?
  pchange = False

  rc = randint(1, 10)
  if position == "goalkeeper": pchange = False

  if versitility <= 3: pchange = False
  elif 4 <= versitility <= 8:
    if rc == 10: pchange = True
  elif 9 <= versitility <= 12:
    if rc >= 9: pchange = True
  elif 13 <= versitility <= 17:
    if rc >= 8: pchange = True
  elif versitility >= 18:
    if rc >= 7: pchange = True

  if pchange == True:
      try:
       op = position
       PC = changePosition(position, heightList, pace, shooting, passing, dribbling, defending, physicality, height, formationPositions, formation)
       if PC != False:
        position = PC[0]
        if PC[1] not in formerPositions: formerPositions.append(PC[1])
        if op != position and quickfire == False:
          SEASONSTRING += str(choice([f" {mLN} switched {lastName}'s position to {position}."]))
       else: pass
      except:
        pass

  #SUMMER TRANSFER WINDOW

  #Creating clubs interested list
  clubsInterested = getClubsInterested(allClubs, demand, club)

  #Underperformance check
  U = underperformance(ability, club, age, yearsAtClub, seasonQualities, lastFee)
  UU = None
  if gauss(0.33,0.15) > U and U <= 0.66 and yearsAtClub > 1:
    UL, UC, UF = transferNegotiations(clubsInterested, contract, value, role, loyalty, yearsAtClub, 'summer', (demand*uniform(0.5,0.75)), club, captain, C[0], ability, True, False)
    #print('U: ',UL, UC, UF)
    a = clubAbility[club] if clubAbility[club] != 0 else 0.5
    if value == 0: value = 0.5
    if UF/value < gauss(0.5,0.2) and (ability/a) < 1 and seasonQuality <= 13 and age <= 29: #If fee not deemed sufficient
      UU = 'Loan'
    else:
      UU = 'Permanent'

  #Transfer negotiations
  L, NEWCLUB, FEE = transferNegotiations(clubsInterested, contract, value, role, loyalty, yearsAtClub, 'summer', demand, club, captain, C[0], ability, False, False)
  if FEE == 0: FEE = 'free'

  #Safeguard if out of contract
  if L == False and contract == 0:
    NEWCLUB = club
    while NEWCLUB == club:
      L, NEWCLUB, FEE = True, freeMove(clubsInterested, nationality), 'free'
      lastFee = FEE

  #IF OUT OF CLUB AND NO CLUB INTERESTED => RETIRE
  if contract == 0 and NEWCLUB == None:
    if nationalTeam == True:
          nationalTeam = False
          retiredFromNT = True
    if quickfire == False: print(f"Retired from football at the age of {age}")
    clubLeftYears[currentClubId] = currentYear
    break

  #Does underperformance force move?
  if L == False and UU == 'Permanent':
    L, NEWCLUB, FEE = UL, UC, UF

  #Safeguard for if a goalkeeper looses his place in starting lineup
  if position == 'goalkeeper' and int(appearances) >= 15 and role != 'starter' and age >=23: #if goalkeeper goes from making many appearances to losing his place
    if random() < 0.67:
      if randint(1,2) == 1 and age <= 27:
        L = False
        LO = True
        NEWCLUB = loan(ability, demand, country, allClubsPerNation, allClubs) #Determine where he goes on loan
      else:
        L = False
        NEWCLUB = loan(ability, demand, country, allClubsPerNation, allClubs) #Use the same thing to determine new club for now
        LO = False

  if L == True and (currentYear-careerStartYear!=0 and loanee == False): #If he leaves the club, trigger the transfer function
    unplayedSeasons = 0
    unPlayedSeasonsParentClub = 0
    littlePlayedSeasons = 0
    oldClub = club
    captain = False
    #contract stuff
    lastContract = currentYear
    contract = int(round(gauss(((-e**((age-18)/11))+6),1),0))
    if contract < 1: contract = 1
    if contract > 6: contract = 6
    try:
      if FEE >= 10000000 and contract < 3: contract = 3 #Nobody spends crazy money on a player for a 1 year contract
    except:
      pass

    lastFee = FEE
    #
    clubLeftYears[currentClubId] = currentYear
    if currentClubId not in clubAppearances:
      clubAppearances[currentClubId] = 0
      clubGoals[currentClubId] = 0
      clubAssists[currentClubId] = 0
    club = NEWCLUB
    parentClub = club
    numberOfClubs += 1
    currentClubId = numberOfClubs
    parentClubId = numberOfClubs
    clubs[numberOfClubs] = club
    yearsAtClub = 0
    clubJoinedYears[numberOfClubs] = currentYear
    uclWinner, uelWinner = False, False
    role = getRole(ability, club, seasonQuality, 0, clubAbility)
    #KEEPING TRACK OF COUNTRY
    for c in countriesWithLeague:
     if numberOfTiers[c] == 1:
      if club in clubsDictionary[c]["Tier1"]:
       country = c
       tier = 1
     if numberOfTiers[c] == 2:
       if club in clubsDictionary[c]["Tier1"]:
        country = c
        tier = 1
       if club in clubsDictionary[c]["Tier2"]:
        tier = 2
        country = c

    mFN, mLN, managerNationality, managerAbility, formation = getManager(club, country)
    itp = 0
    while position not in formationPositions[formation] and itp < 10:
      position = getPosition(heightList, pace, shooting, passing, dribbling, defending, physicality, height, firstPosition)
      itp += 1
    if position not in formationPositions[formation]:
     Alist = {}
     for p in formationPositions[formation]:
       A = calculateAbility(p, pace, shooting, passing, dribbling, defending, physicality, goalkeeping)
       Alist[p] = A
     H = max(Alist.values())
     J = dict()
     for j in Alist: J[Alist[j]] = j
     position = J[H]

    teamAbility = int((2/3)*clubAbility[club]+(1/3)*managerAbility)
    leaguePosition = leagueSeason(country, teamAbility, tier)

    if quickfire == False:
      if UU != 'Permanent': #If not forced out
        SEASONSTRING += str(choice([f" {lastName} transferred to {club} for {FEE} on a {contract} year deal. They played in the {tier}. tier in {country}."]))
      else: SEASONSTRING += str(choice([f" {lastName} was sold to {club} for {FEE} on a {contract} year deal, due to underperforming. His new club played in the {tier}. tier in {country}."]))

  LO = leaveOnLoan(ability, club, unplayedSeasons, littlePlayedSeasons, age, seasonQuality)
  if role in ['nonexistent', 'minor'] and age <= 23:
    if random() < 0.75: LO = True

  if UU == 'Loan' and yearsAtClub != 0: LO = True

  if LO == True and loanee == False and contract >= 2:
    loanee = True
    OmFN, OmLN, OmanagerNationality, OmanagerAbility, Oformation = mFN, mLN, managerNationality, managerAbility, formation
    unplayedSeasons = 0
    littlePlayedSeasons = 0
    captain = False
    parentClub = club
    parentClubId = currentClubId
    club = loan(ability, demand, country, allClubsPerNation, allClubs) #Then the loan club is decided
    while club == parentClub:
      club = loan(ability, demand, country, allClubsPerNation, allClubs)
    numberOfClubs += 1
    currentClubId = numberOfClubs
    loanClubs.append(currentClubId)
    clubs[currentClubId] = club
    clubJoinedYears[currentClubId] = currentYear
    role = getRole(ability, club, seasonQuality, 0, clubAbility)
    rl = randint(1, 10)
    if rl == 10 and contract >= 3: yearsLeftOnLoan = 2
    else: yearsLeftOnLoan = 1
    #KEEPING TRACK OF COUNTRY
    for c in countriesWithLeague:
     if numberOfTiers[c] == 1:
      if club in clubsDictionary[c]["Tier1"]:
       country = c
       tier = 1
     if numberOfTiers[c] == 2:
       if club in clubsDictionary[c]["Tier1"]:
        country = c
        tier = 1
       if club in clubsDictionary[c]["Tier2"]:
        tier = 2
        country = c

    mFN, mLN, managerNationality, managerAbility, formation = getManager(club, country)
    itp = 0
    while position not in formationPositions[formation] and itp < 10:
      position = getPosition(heightList, pace, shooting, passing, dribbling, defending, physicality, height, firstPosition)
      itp += 1
    if position not in formationPositions[formation]:
     Alist = {}
     for p in formationPositions[formation]:
       A = calculateAbility(p, pace, shooting, passing, dribbling, defending, physicality, goalkeeping)
       Alist[p] = A
     H = max(Alist.values())
     J = dict()
     for j in Alist: J[Alist[j]] = j
     position = J[H]

    teamAbility = int((2/3)*clubAbility[club]+(1/3)*managerAbility)
    leaguePosition = leagueSeason(country, teamAbility, tier)
    cupWinner = False
    uclWinner = False
    uelWinner = False
    ueclWinner = False

    if quickfire == False:
      if UU != 'Loan': SEASONSTRING += str(choice([f" He was loaned out to {club} for {yearsLeftOnLoan} seasons. They played in the {tier}. tier in {country}."]))
      else: SEASONSTRING += str(choice([f" Due to his poor performances, {lastName} was loaned out to {club} for {yearsLeftOnLoan} seasons. They played in the {tier}. tier in {country}."]))

  ##########################################

  if seasonQuality >= 20 and ability >= 18: #check for goat season
    goatSeason = True
    gtc += 1

  #Former position check
  if position not in formerPositions: formerPositions.append(position)

  ##################NEW YEAR##################
  currentYear += 1
  if birthHalf == 2: age += 1

  #Winter Transfer Window
  #Creating clubs interested list
  clubsInterested = getClubsInterested(allClubs, demand, club)

  #Demand
  demand = getDemand(ability, age, seasonQuality, goals, assists)
  madeWinterTransfer = False
  newWinterClub = False
  playedForNewClub = False
  LO = False

  L, NEWCLUB, FEE = transferNegotiations(clubsInterested, contract, value, role, loyalty, yearsAtClub, 'winter', demand, club, captain, C[0], ability, False, False)
  if FEE == 0: FEE = 'free'

  if L == True and (currentYear-careerStartYear and loanee == False): #If he leaves the club, trigger the transfer function
    madeWinterTransfer = True
    newWinterClub = True
    unplayedSeasons = 0
    littlePlayedSeasons = 0
    unPlayedSeasonsParentClub = 0
    #contract stuff
    lastContract = currentYear
    contract = int(round(gauss(((-e**((age-18)/11))+6),1),0))
    if contract < 1: contract = 1
    if contract > 6: contract = 6
    try:
      if FEE >= 10000000 and contract < 3: contract = 3 #Nobody spends crazy money on a player for a 1 year contract
    except:
      pass
    lastFee = FEE
    #
    captain = False
    oldClub = club
    clubLeftYears[currentClubId] = currentYear
    if currentClubId not in clubAppearances:
      clubAppearances[currentClubId] = 0
      clubGoals[currentClubId] = 0
      clubAssists[currentClubId] = 0

    uclWinner, uelWinner = False, False
    if leaveOnLoan(ability, club, unplayedSeasons, littlePlayedSeasons, age, seasonQuality) == False:
     playedForNewClub = True
     #Now we determine the player's individual stats for the half season at their former club
     role = getRole(ability, club, seasonQuality, role, clubAbility)
     appearances = int((getAppearances(club, fitness, role, position))/2) #Simulating appearances
     if appearances <= 10:
       unplayedSeasons += 1
     else:
       unplayedSeasons = 0
     if appearances <= 20:
       littlePlayedSeasons += 1
       unPlayedSeasonsParentClub += 1
     else:
       littlePlayedSeasons = 0
     totalAppearances += appearances
     if currentClubId not in clubAppearances:
       clubAppearances[currentClubId] = appearances
     else:
      clubAppearances[currentClubId] += appearances
     goals = int(getGoals(position, appearances, seasonQuality, tier, country)) #Simulating goals
     totalGoals += goals
     if currentClubId not in clubGoals:
       clubGoals[currentClubId] = goals
     else:
       clubGoals[currentClubId] += goals
     assists = int(getAssists(position, appearances, seasonQuality, tier, country)) #Simulating assists
     totalAssists += assists
     if currentClubId not in clubAssists:
       clubAssists[currentClubId] = assists
     else:
      clubAssists[currentClubId] += assists

     LO = False

     if quickfire == False:
       ###Print halfway season stats for old club
      print(f"{lastName}, {nationality}, {position}")
      print ("{:<19} {:<25} {:<20} {:<15} {:<10} {:<10} {:<10}".format(color.UNDERLINE + 'Year','Club','Appearances','Goals','Assists','Age','Performance' + color.END))
      print ("{:<15} {:<25} {:<20} {:<15} {:<10} {:<10} {:<10}".format(currentYear, club, appearances, goals, assists, age, seasonQuality))
    else:
      LO = True

    club = NEWCLUB
    parentClub = club
    numberOfClubs += 1
    currentClubId = numberOfClubs
    parentClubId = numberOfClubs
    clubs[numberOfClubs] = club
    role = getRole(ability, club, seasonQuality, 0, clubAbility)
    #yearsAtClub = 0
    clubJoinedYears[numberOfClubs] = currentYear
    madeWinterTransfer = True
    #KEEPING TRACK OF COUNTRY
    for c in countriesWithLeague:
     if numberOfTiers[c] == 1:
      if club in clubsDictionary[c]["Tier1"]:
       country = c
       tier = 1
     if numberOfTiers[c] == 2:
       if club in clubsDictionary[c]["Tier1"]:
        country = c
        tier = 1
       if club in clubsDictionary[c]["Tier2"]:
        tier = 2
        country = c

    mFN, mLN, managerNationality, managerAbility, formation = getManager(club, country)
    itp = 0
    while position not in formationPositions[formation] and itp < 10:
      position = getPosition(heightList, pace, shooting, passing, dribbling, defending, physicality, height, firstPosition)
      itp += 1
    if position not in formationPositions[formation]:
     Alist = {}
     for p in formationPositions[formation]:
       A = calculateAbility(p, pace, shooting, passing, dribbling, defending, physicality, goalkeeping)
       Alist[p] = A
     H = max(Alist.values())
     J = dict()
     for j in Alist: J[Alist[j]] = j
     position = J[H]

    teamAbility = int((2/3)*clubAbility[club]+(1/3)*managerAbility)
    leaguePosition = leagueSeason(country, teamAbility, tier)
    cupWinner = False
    uclWinner = False
    uelWinner = False
    ueclWinner = False

    if quickfire == False:
      SEASONSTRING += str(choice([f" He transferred to {club} in January for {FEE} on a {contract} year deal. They play in the {tier}. tier in {country}."]))
    seasonQuality = getSeasonQuality(ability, diligence, age, fitness)
    seasonQualities.append(seasonQuality)

  if LO ==False and playedForNewClub == False: LO = leaveOnLoan(ability, club, unplayedSeasons, littlePlayedSeasons, age, seasonQuality)
  if LO == True and loanee == False  and contract >= 2:
    loanee = True
    OmFN, OmLN, OmanagerNationality, OmanagerAbility, Oformation = mFN, mLN, managerNationality, managerAbility, formation
    madeWinterTransfer = True
    unplayedSeasons = 0
    littlePlayedSeasons = 0
    captain = False
    parentClub = club
    parentClubId = currentClubId

    if newWinterClub == False:
     #Now we determine the player's individual stats for the half season at their former club
     role = getRole(ability, club, seasonQuality, role, clubAbility)
     appearances = int((getAppearances(club, fitness, role, position))/2) #Simulating appearances
     if appearances <= 10:
       unplayedSeasons += 1
     else:
       unplayedSeasons = 0
     if appearances <= 20:
       littlePlayedSeasons += 1
       unPlayedSeasonsParentClub += 1
     else:
       littlePlayedSeasons = 0
     totalAppearances += appearances
     if currentClubId not in clubAppearances:
       clubAppearances[currentClubId] = appearances
     else:
      clubAppearances[currentClubId] += appearances
     goals = int(getGoals(position, appearances, seasonQuality, tier, country)) #Simulating goals
     totalGoals += goals
     if currentClubId not in clubGoals:
       clubGoals[currentClubId] = goals
     else:
       clubGoals[currentClubId] += goals
     assists = int(getAssists(position, appearances, seasonQuality, tier, country)) #Simulating assists
     totalAssists += assists
     if currentClubId not in clubAssists:
       clubAssists[currentClubId] = assists
     else:
      clubAssists[currentClubId] += assists

     if quickfire == False:
      ###Print halfway season stats for old club
      print(f"{lastName}, {nationality}, {position}")
      print ("{:<19} {:<25} {:<20} {:<15} {:<10} {:<10} {:<10}".format(color.UNDERLINE + 'Year','Club','Appearances','Goals','Assists','Age','Performance' + color.END))
      print ("{:<15} {:<25} {:<20} {:<15} {:<10} {:<10} {:<10}".format(currentYear, club, appearances, goals, assists, age, seasonQuality))

    club = loan(ability, demand, country, allClubsPerNation, allClubs) #Then the loan club is decided
    while club == parentClub:
      club = loan(ability, demand, country, allClubsPerNation, allClubs)
    numberOfClubs += 1
    currentClubId = numberOfClubs
    loanClubs.append(currentClubId)
    clubs[currentClubId] = club
    clubJoinedYears[currentClubId] = currentYear
    role = getRole(ability, club, seasonQuality, 0, clubAbility)
    rl = randint(1, 10)
    if rl == 10 and contract >= 3: yearsLeftOnLoan = 2
    else: yearsLeftOnLoan = 1
    madeWinterTransfer = True
    #KEEPING TRACK OF COUNTRY
    for c in countriesWithLeague:
     if numberOfTiers[c] == 1:
      if club in clubsDictionary[c]["Tier1"]:
       country = c
       tier = 1
     if numberOfTiers[c] == 2:
       if club in clubsDictionary[c]["Tier1"]:
        country = c
        tier = 1
       if club in clubsDictionary[c]["Tier2"]:
        tier = 2
        country = c

    mFN, mLN, managerNationality, managerAbility, formation = getManager(club, country)
    itp = 0
    while position not in formationPositions[formation] and itp < 10:
      position = getPosition(heightList, pace, shooting, passing, dribbling, defending, physicality, height, firstPosition)
      itp += 1
    if position not in formationPositions[formation]:
     Alist = {}
     for p in formationPositions[formation]:
       A = calculateAbility(p, pace, shooting, passing, dribbling, defending, physicality, goalkeeping)
       Alist[p] = A
     H = max(Alist.values())
     J = dict()
     for j in Alist: J[Alist[j]] = j
     position = J[H]

    teamAbility = int((2/3)*clubAbility[club]+(1/3)*managerAbility)
    leaguePosition = leagueSeason(country, teamAbility, tier)
    cupWinner = False
    uclWinner = False
    uelWinner = False
    ueclWinner = False

    if quickfire == False:
      SEASONSTRING += str(choice([f" {lastName} was loaned out in January to {club} for {yearsLeftOnLoan} seasons. They play in the {tier}. tier in {country}."]))
    seasonQuality = getSeasonQuality(ability, diligence, age, fitness)
    seasonQualities.append(seasonQuality)

  ##########################################

  #Check how club performed
  teamAbility = int((2/3)*clubAbility[club]+(1/3)*managerAbility)
  hasWonContinental = False #To ensure you can't win more than one continental trophy
  honorsThisSeason = []
  #Continental competitions

  if cupWinner == True and country == 'England':
    cupWinner = []
    if 'FA Cup' in cupCampaign: cupWinner.append('W1')
    if 'EFL Cup' in cupCampaign: cupWinner.append('W2')


  #Supercup
  if uclWinner == True or uelWinner == True:
    uscw = smallCup('UEFA Super Cup', teamAbility)
    if uscw == 'Victory':
      uscProgression = 'Victory'
      totalHonorsWon += 1
      honors[totalHonorsWon] = ("UEFA Super Cup", club, currentYear-1)
      honorsThisSeason.append("UEFA Super Cup")
    else:
      uscProgression = 'Defeat'

  #Club World Cup
  if uclWinner == True:
    cwcw = smallCup('Club World Cup', teamAbility)
    if cwcw == 'Victory':
      cwcProgression = 'Victory'
      totalHonorsWon += 1
      honors[totalHonorsWon] = ("Club World Cup", club, currentYear)
      honorsThisSeason.append("Club World Cup")
    else:
      cwcProgression = cwcw

  continentalProgression = 0
  EU = isInEurope(club, country, leaguePosition, cupWinner, uclWinner, uelWinner, ueclWinner, tier)
  if EU == "Champions League" and wonPromotion != True:
    uclw = continentalCompetition('Champions League', teamAbility)
    continentalProgression = (EU, uclw)
    if uclw == 'Victory':
      uclWinner = True
      uelWinner = False
      ueclWinner = False
      totalHonorsWon += 1
      honors[totalHonorsWon] = ("Champions League", club, currentYear)
      honorsThisSeason.append("Champions League")
      hasWonContinental = True
    else:
      uclWinner = False
      uelWinner = False
      ueclWinner = False
  elif EU == "Europa League" and wonPromotion != True:
    uelw = continentalCompetition('Europa League', teamAbility)
    continentalProgression = (EU, uelw)
    if uelw == 'Victory':
      uclWinner = False
      uelWinner = True
      ueclWinner = False
      totalHonorsWon += 1
      honors[totalHonorsWon] = ("Europa League", club, currentYear)
      honorsThisSeason.append("Europa League")
      hasWonContinental = True
    else:
      uclWinner = False
      uelWinner = False
      ueclWinner = False
  elif EU == "Conference League" and wonPromotion != True:
    ueclw = continentalCompetition('Conference League', teamAbility)
    continentalProgression = (EU, ueclw)
    if ueclw == 'Victory':
      uclWinner = False
      uelWinner = False
      ueclWinner = True
      totalHonorsWon += 1
      honors[totalHonorsWon] = ("Conference League", club, currentYear)
      honorsThisSeason.append("Conference League")
      hasWonContinental = True
    else:
      uclWinner = False
      uelWinner = False
      ueclWinner = False
  #League
  wonPromotion = False
  sufferedRelegation = False
  t = 'Tier1' if tier == 1 else 'Tier2'
  leaguePosition = leagueSeason(country, teamAbility, tier)
  if tier == 2:
    if leaguePosition == 1:
      totalHonorsWon += 1
      honors[totalHonorsWon] = (leagueNames[country][t], club, currentYear)
      honorsThisSeason.append(leagueNames[country][t])
      tier = 1
      wonPromotion = True
      clubAbility[club] += 2
    elif 2 <= leaguePosition <= 7:
      P = promotion(club)
      if P == True:
        tier = 1
        wonPromotion = True
        clubAbility[club] += 2
  else:
    if leaguePosition == 1:
      totalHonorsWon += 1
      honors[totalHonorsWon] = (leagueNames[country][t], club, currentYear)
      honorsThisSeason.append(leagueNames[country][t])
    else:
      if leaguePosition in [(leagueNumbers[country][t]-2),(leagueNumbers[country][t]-1),(leagueNumbers[country][t])] and numberOfTiers[country] == 2:
        sufferedRelegation = True
        clubAbility[club] -= randint(1,3)
        tier = 2
  #Cup
  cupCampaign = cupCompetition(country,teamAbility)
  if country == 'England':
    if 'FA Cup' in cupCampaign:
      cupWinner = True
      totalHonorsWon += 1
      honors[totalHonorsWon] = (cupNames[country][0], club, currentYear)
      honorsThisSeason.append(cupNames[country][0])
    if 'EFL Cup' in cupCampaign:
      cupWinner = True
      totalHonorsWon += 1
      honors[totalHonorsWon] = (cupNames[country][1], club, currentYear)
      honorsThisSeason.append(cupNames[country][1])
    if 'FA Cup' not in cupCampaign and 'EFL Cup' not in cupCampaign: cupWinner = False
  else:
    if cupCampaign == 'Victory':
      cupWinner = True
      totalHonorsWon += 1
      honors[totalHonorsWon] = (cupNames[country], club, currentYear)
      honorsThisSeason.append(cupNames[country])
    else:
      cupWinner = False

  #Former position check
  if position not in formerPositions: formerPositions.append(position)

  #Now we determine the player's individual stats for the season
  if role == 0: role = getRole(ability, club, seasonQuality, role, clubAbility)
  appearances = getAppearances(club, fitness, role, position) #Simulating appearances
  if madeWinterTransfer == True: appearances = int(appearances/2)
  if appearances <= 10 and madeWinterTransfer == False:
    unplayedSeasons += 1
  else:
    unplayedSeasons = 0
  if appearances <= 20 and madeWinterTransfer == False:
    littlePlayedSeasons += 1
    if loanee == False: unPlayedSeasonsParentClub += 1
  else:
    littlePlayedSeasons = 0
  totalAppearances += appearances
  if currentClubId not in clubAppearances:
   clubAppearances[currentClubId] = appearances
  else:
   clubAppearances[currentClubId] += appearances
  goals = getGoals(position, appearances, seasonQuality, tier, country) #Simulating goals
  if madeWinterTransfer == True: goals = int(goals/2)
  totalGoals += goals
  if currentClubId not in clubGoals:
   clubGoals[currentClubId] = goals
  else:
   clubGoals[currentClubId] += goals
  assists = getAssists(position, appearances, seasonQuality, tier, country) #Simulating assists
  if madeWinterTransfer == True: assists = int(assists/2)
  totalAssists += assists
  if currentClubId not in clubAssists:
   clubAssists[currentClubId] = assists
  else:
   clubAssists[currentClubId] += assists
  #It is important that the player's ability go up if he does well, but it can also go down
  dpa, ds, dp, ddr, dd, dph, dg = playerGrowth(ability, seasonQuality, age, position, fitness, pace, shooting, passing, dribbling, defending, physicality, goalkeeping)
  for d in [dpa, ds, dp, ddr, dd, dph, dg]:
    if appearances <= 5: d = int(d/4)
    elif 6 <= appearances <= 20: d = int(d/2)
  pace += dpa
  shooting += ds
  passing += dp
  dribbling += ddr
  defending += dd
  physicality += dph
  goalkeeping += dg
  #never negative
  if pace < 0: pace = 0
  if shooting < 0: shooting = 0
  if passing < 0: passing = 0
  if dribbling < 0: dribbling = 0
  if defending < 0: defending = 0
  if physicality < 0: physicality = 0
  if goalkeeping < 0: goalkeeping = 0
  #Recalculate ability
  ability = calculateAbility(position, pace, shooting, passing, dribbling, defending, physicality, goalkeeping)
  #National team stuff
  #Making sure these get reset and old values don't carry on into new seasons
  natApp = 0
  natGoals = 0
  natAssists = 0

  wcProgression = None
  ecProgression = None
  nlProgression = None
  caProgression = None
  afconProgression = None
  acProgression = None
  gcProgression = None

  #Check if retires from national team
  if age >= 34 and nationalTeam == True:
    fq = None
    if fitness < 8: fq = 0
    elif 8 <= fitness <= 13: fq = 1
    else: fq = 2
    j = randint(1, (3+fq))
    if j == 1:
      nationalTeam = False
      retiredFromNT = True
      if quickfire == False:
        SEASONSTRING += str(choice([f" At the age of {age}, {lastName} retired from the national team.", f"{lastName} retired from the {nationality} national team."]))

  if retiredFromNT == False:
     nationalTeam = pickedForNT(nationality, ability, nationalTeamAppearances, seasonQuality) #Whether picked for NT year by year

  if nationalTeam == True:
    if nationalTeamAppearances == 0: nationalTeamStartYear = currentYear+randint(-1,0)

    #Captaincy
    if natCaptain == False:
      if natCaptaincy(ability, age, leadership, nationalTeamStartYear, currentYear, nationality) == True:
        natCaptain = True
        if quickfire == False:
          SEASONSTRING += str(choice([f" {lastName} was named the captain of the national team of {nationality}.", f"For his years of service and leadership, {lastName} was honored with the national team captaincy."]))

    natApp = ntAppearances(ability, diligence, seasonQuality)
    if natApp > 0: latestNatApp = currentYear
    natGoals = ntGoals(ability, natApp, diligence, seasonQuality, position)
    natAssists = ntAssists(ability, natApp, diligence, seasonQuality, position)
    nationalTeamAppearances += natApp
    nationalTeamGoals += natGoals
    nationalTeamAssists += natAssists
    totalAppearances += natApp
    totalGoals += natGoals
    totalAssists += natAssists
    #National Team Tournaments

    if currentYear in wcYears:
      if matchup(natAbility[nationality], 11) == True:
        wcProgression = worldCup(nationality)
      else: wcProgression = 'dnq'
      if wcProgression == 'Victory':
        totalHonorsWon += 1
        honors[totalHonorsWon] = ("World Cup", nationality, currentYear)
        honorsThisSeason.append("World Cup")

    if currentYear in euroYears and nationality in europeanCountries:
      if matchup(natAbility[nationality], 10) == True:
        ecProgression = worldCup(nationality)
      else: ecProgression = 'dnq'
      if ecProgression == 'Victory':
        totalHonorsWon += 1
        honors[totalHonorsWon] = ("Euros", nationality, currentYear)
        honorsThisSeason.append("Euros")

    if currentYear in nlYears and nationality in europeanCountries:
      lg, ch, kn = nationsLeague(nationality, nationLeague)
      if ch == None and kn == False:
        nlProgression = 'no change'
      if ch != None:
        nlProgression = ch
        nationLeague = lg
      if kn != False:
        nlProgression = kn
        if nlProgression == 'Victory':
          totalHonorsWon += 1
          honors[totalHonorsWon] = ("Nations League", nationality, currentYear)
          honorsThisSeason.append("Nations League")

    if currentYear in afconYears and nationality in africanCountries:
      if matchup(natAbility[nationality], 6) == True:
        afconProgression = afcon(nationality)
      else: afconProgression = 'dnq'
      if afconProgression == 'Victory':
        totalHonorsWon += 1
        honors[totalHonorsWon] = ("African Cup of Nations", nationality, currentYear)
        honorsThisSeason.append("African Cup of Nations")

    if currentYear in copamYears and nationality in southAmericanCountries:
      caProgression = copaamerica(nationality)
      if caProgression == 'Victory':
        totalHonorsWon += 1
        honors[totalHonorsWon] = ("Copa America", nationality, currentYear)
        honorsThisSeason.append("Copa America")

    if currentYear in goldcupYears and nationality in northAmericanCountries:
      if matchup(natAbility[nationality], 5) == True:
        gcProgression = goldcup(nationality)
      else: gcProgression = 'dnq'
      if gcProgression == 'Victory':
        totalHonorsWon += 1
        honors[totalHonorsWon] = ("Gold Cup", nationality, currentYear)
        honorsThisSeason.append("Gold Cup")

    if currentYear in asiancupYears and nationality in asianCountries:
      if matchup(natAbility[nationality], 6) == True:
        acProgression = asiancup(nationality)
      else: acProgression = 'dnq'
      if acProgression == 'Victory':
        totalHonorsWon += 1
        honors[totalHonorsWon] = ("Asian Cup", nationality, currentYear)
        honorsThisSeason.append("Asian Cup")

  #Ballon d'Or?
  totalSeasonGoals = goals + natGoals
  totalSeasonAssists = assists + natAssists
  leagueStrength = 6 if tier == 2 else leagueAbilities[country]
  b = ballondOr(ability, seasonQuality, goatSeason, honorsThisSeason, totalSeasonGoals, totalSeasonAssists, leagueStrength)
  if b == True:
    totalIndividualHonorsWon += 1
    individualHonors[totalIndividualHonorsWon] = ("Ballon dOr", currentYear)
    honorsThisSeason.append("Ballon dOr")
  #Checks if it was a 'best season'
  if seasonQuality > 1.25*(sum(seasonQualities)/len(seasonQualities)):
    nbs += 1
    bsy = f"{currentYear - 1} - {currentYear}"
    bsc = f"{club}"
    bsa = int(appearances + natApp)
    bsg = int(goals + natGoals)
    bsas = int(assists + natAssists)
    bspo = position.capitalize()
    bestSeasons[nbs] = [bsy, bsc, bsa, bsg, bsas, bspo]
  goatSeason = False #Resetting the goat season boolean

  if appearances == 0:
    nh = len(honorsThisSeason)
    for h in range(totalHonorsWon-(nh-1),totalHonorsWon+1):
      honors.pop(h)
    honorsThisSeason = []

  #Check if won player of the month
  potmc = potm(seasonQuality, country, tier)
  #Check if won player of the season
  potsc = pots(seasonQuality, country, tier)
  if potsc == True:
    totalIndividualHonorsWon += 1
    individualHonors[totalIndividualHonorsWon] = ("Player of the Season", leagueNames[country][t], currentYear)
    honorsThisSeason.append("Player of the Season")
  #Check if named in team of the season
  totsc = tots(seasonQuality, country, tier)

  value = getValue(age, ability, country, tier, seasonQualities)

  #Safeguard
  if potsc == True: totsc = True
  if totsc == True:
    totalIndividualHonorsWon += 1
    individualHonors[totalIndividualHonorsWon] = ("Team of the Season", leagueNames[country][t], currentYear)
    honorsThisSeason.append("Team of the Season")
  #Golden boot/glove
  G = golden(seasonQuality, totalGoals, position, country, tier, club, leaguePosition)
  if G == True and position == 'goalkeeper':
    totalIndividualHonorsWon += 1
    individualHonors[totalIndividualHonorsWon] = ("Golden Glove", leagueNames[country][t], currentYear)
    honorsThisSeason.append("Golden Glove")
  elif G == True and position != 'goalkeeper':
    totalIndividualHonorsWon += 1
    individualHonors[totalIndividualHonorsWon] = ("Golden Boot", leagueNames[country][t], currentYear)
    honorsThisSeason.append("Golden Boot")

  if quickfire == False:
    ###Print per season

    ##Stats table printing
    print()
    print(f"{lastName}, {nationality}, {position}, Ability: {ability}, Club Ability: {clubAbility[club]}, Manager: {mFN} {mLN}, Manager Ability: {managerAbility}, System: {formation}")
    print ("{:<19} {:<28} {:<20} {:<15} {:<10} {:<10} {:<10}".format(color.UNDERLINE + 'Year','Club','Appearances','Goals','Assists','Age','Performance' + color.END))
    print ("{:<15} {:<28} {:<20} {:<15} {:<10} {:<10} {:<10}".format(currentYear, club, appearances, goals, assists, age, seasonQuality))
    if natApp >0:
     print ("{:<15} {:<28} {:<20} {:<15} {:<10}".format(currentYear, nationality, natApp, natGoals, natAssists))
    print("")
    if honorsThisSeason:
     print("Won honors:")
     for h in honorsThisSeason: print(h)
    ##

    #Capturing the text
    SEASONSTRING += str(printPerSeason(seasonQuality, seasonQualities, madeWinterTransfer, uscProgression, cwcProgression, potmc, potsc, totsc, country, leaguePosition, cupCampaign, continentalProgression, wonPromotion, sufferedRelegation, wcProgression, ecProgression, nlProgression, nationLeague, caProgression, afconProgression, acProgression, gcProgression, lastName, club))

  #Reseting some stuff
  uscProgression, cwcProgression = None, None

  #CHANGING CLUB ABILITIES POST SEASON
 #for clubChange in allClubs:
  #  clubAbility[clubChange] += int(gauss(0,1))
  clubAbility[club] += int(gauss(0,1))
  if 13 <= ability and clubAbility[club] <= 7:
    if randint(1, 2) == 2: clubAbility[club] += int(gauss(1,1))
  elif 15 <= ability and clubAbility[club] <= 11:
    if randint(1, 2) == 2: clubAbility[club] += int(gauss(1,1))
  elif 17 <= ability and clubAbility[club] <= 13:
    if randint(1, 2) == 2: clubAbility[club] += int(gauss(1,1))
  elif 19 <= ability and clubAbility[club] <= 15:
    if randint(1, 2) == 2: clubAbility[club] += int(gauss(1,1))

    #CHANGING NATIONAL TEAM ABILITIES POST SEASON
  natAbility[nationality] += int(gauss(0,1))
  if 13 <= ability and natAbility[nationality] <= 7:
    if randint(1, 2) == 2: natAbility[nationality] += int(gauss(1,1))
  elif 15 <= ability and natAbility[nationality] <= 11:
    if randint(1, 2) == 2: natAbility[nationality] += int(gauss(1,1))
  elif 17 <= ability and natAbility[nationality] <= 13:
    if randint(1, 2) == 2: natAbility[nationality] += int(gauss(1,1))
  elif 19 <= ability and natAbility[nationality] <= 15:
    if randint(1, 2) == 2: natAbility[nationality] += int(gauss(1,1))

  #Updating lists
  for cou in countriesWithLeague:
   for clu in clubsDictionary[cou]["Tier1"]:
     allClubs.append(clu)
     allClubsPerNation[cou].append(clu)
     if clubAbility[clu] <= 4: clubs3.append(clu)
     elif 5 <= clubAbility[clu] <= 8: clubs6.append(clu)
     elif 9 <= clubAbility[clu] <= 12: clubs11.append(clu)
     elif 13 <= clubAbility[clu] <= 16: clubs14.append(clu)
     else: clubs18.append(clu)
   if numberOfTiers[cou] == 2:
     for clu in clubsDictionary[cou]["Tier2"]:
       allClubs.append(clu)
       allClubsPerNation[country].append(clu)
       if clubAbility[clu] <= 4: clubs3.append(clu)
       elif 5 <= clubAbility[clu] <= 8: clubs6.append(clu)
       elif 9 <= clubAbility[clu] <= 12: clubs11.append(clu)
       elif 13 <= clubAbility[clu] <= 16: clubs14.append(clu)
       else: clubs18.append(clu)

  #Manager
  S = sackedInTheMorning(country, club, managerAbility, leaguePosition)
  if S == True:
    if quickfire == False:
      SEASONSTRING += str(choice([f" {club}'s manager {mFN} {mLN} was sacked and a new manager,"]))
    mFN, mLN, managerNationality, managerAbility, formation = getManager(club, country)
    if quickfire == False:
      SEASONSTRING += str(choice([f" {mFN} {mLN} from {managerNationality}, was brought in."]))
    itp = 0
    while position not in formationPositions[formation] and itp < 10:
      position = getPosition(heightList, pace, shooting, passing, dribbling, defending, physicality, height, firstPosition)
      itp += 1
    if position not in formationPositions[formation]:
     Alist = {}
     for p in formationPositions[formation]:
       A = calculateAbility(p, pace, shooting, passing, dribbling, defending, physicality, goalkeeping)
       Alist[p] = A
     H = max(Alist.values())
     J = dict()
     for j in Alist: J[Alist[j]] = j
     position = J[H]

  P = managerPoached(country, club, managerAbility, leaguePosition)
  if P == True and S == False:
    if quickfire == False:
      SEASONSTRING += str(choice([f" {club}'s manager {mFN} {mLN} left for another project and a new manager,"]))
    mFN, mLN, managerNationality, managerAbility, formation = getManager(club, country)
    if quickfire == False:
      SEASONSTRING += str(choice([f" {mFN} {mLN} from {managerNationality}, was brought in."]))
    itp = 0
    while position not in formationPositions[formation] and itp < 10:
      position = getPosition(heightList, pace, shooting, passing, dribbling, defending, physicality, height, firstPosition)
      itp += 1
    if position not in formationPositions[formation]:
     Alist = {}
     for p in formationPositions[formation]:
       A = calculateAbility(p, pace, shooting, passing, dribbling, defending, physicality, goalkeeping)
       Alist[p] = A
     H = max(Alist.values())
     J = dict()
     for j in Alist: J[Alist[j]] = j
     position = J[H]

  yearsAtClub += 1
  contract -= 1

  #LOANEE THINGS
  if loanee == True:
    yearsLeftOnLoan -= 1
    if yearsLeftOnLoan == 0:
      loanee = False
      mFN, mLN, managerNationality, managerAbility, formation = OmFN, OmLN, OmanagerNationality, OmanagerAbility, Oformation
      clubLeftYears[currentClubId] = currentYear
      currentClubId = parentClubId
      club = parentClub
      #yearsAtClub = 0
      unplayedSeasons = 0
      littlePlayedSeasons = 0
      role = getRole(ability, club, seasonQuality, 0, clubAbility)
      if position not in formationPositions[formation]:
        Alist = {}
        for p in formationPositions[formation]:
          A = calculateAbility(p, pace, shooting, passing, dribbling, defending, physicality, goalkeeping)
          Alist[p] = A
        H = max(Alist.values())
        J = dict()
        for j in Alist: J[Alist[j]] = j
        position = J[H]

    #KEEPING TRACK OF COUNTRY
    for c in countriesWithLeague:
     if numberOfTiers[c] == 1:
      if club in clubsDictionary[c]["Tier1"]:
       country = c
       tier = 1
     if numberOfTiers[c] == 2:
       if club in clubsDictionary[c]["Tier1"]:
        country = c
        tier = 1
       if club in clubsDictionary[c]["Tier2"]:
        tier = 2
        country = c
    t = "Tier1" if tier == 1 else "Tier2"

  #printing out season string
  if quickfire == False:
    print()
    SSL = SEASONSTRING.split()
    lpl = 100 #letter per line
    currentLine = ''
    for word in SSL:
      if len(currentLine) + len(word)/2 < lpl:
        print(word, end=' ')
        currentLine += word
      else:
        currentLine = word
        print(word)

    print()

    print('----------------------------------------------------------------------------------------------------------------------')

  #If he retires

  R = retire(age, fitness, ability, club)
  if R == True:
    if nationalTeam == True:
          nationalTeam = False
          retiredFromNT = True
    if quickfire == False: print(f"Retired from football at the age of {age}")
    clubLeftYears[currentClubId] = currentYear
    break

print("")
###########################
####PRINTING STATISTICS####
###########################

if len(formerPositions) > 1 and quickfire == True:
  already = []
  print("He also played the following positions:")
  for p in formerPositions:
    if p != firstPosition and p not in already:
      print(p)
      already.append(p)
  print()

#ClubListsDict
cld = dict()

for j in range(1, numberOfClubs + 1):
  if j + 1 in clubJoinedYears:
   cld[j] = list()
   cld[j].append(str(clubJoinedYears[j]) + " - " + str(clubLeftYears[j]))
   if j in loanClubs:
    cld[j].append('('+str(clubs[j])+')')
   else:
    cld[j].append(str(clubs[j]))
   cld[j].append(str(clubAppearances[j]))
   cld[j].append(str(clubGoals[j]))
   cld[j].append(str(clubAssists[j]))
  else:
   cld[j] = list()
   cld[j].append(str(clubJoinedYears[j]) + " - " + str(clubLeftYears[j]))
   if j in loanClubs:
    cld[j].append('('+str(clubs[j])+')')
   else:
    cld[j].append(str(clubs[j]))
   cld[j].append(str(clubAppearances[j]))
   cld[j].append(str(clubGoals[j]))
   cld[j].append(str(clubAssists[j]))

print(f"{firstName} {lastName}")
print ("{:<19} {:<28} {:<20} {:<15} {:<10}".format(color.UNDERLINE + 'Years','Club','Appearances','Goals','Assists' + color.END))
for k, v in cld.items():
  years, club, appearances, goals, assists = v
  print ("{:<15} {:<28} {:<20} {:<15} {:<10}".format(years, club, appearances, goals, assists))

if nationalTeamAppearances > 0:
  print ("{:<19} {:<28} {:<20} {:<15} {:<10}".format(color.ITALICS + str(nationalTeamStartYear) + " - " + str(latestNatApp), nationality, str(nationalTeamAppearances), str(nationalTeamGoals), str(nationalTeamAssists)) + color.END)

print ("{:<19} {:<28} {:<20} {:<15} {:<10}".format(color.BOLD + str(careerStartYear) + " - " + str(currentYear), "Total", str(totalAppearances), str(totalGoals), str(totalAssists)) + color.END)

print("")
honorsNames = list()
honorsClubs = list()
honorsYears = list()
allHonors = list(honors.values())
allIndividualHonors = list(individualHonors.values())
individualHonorsNames = list()
individualHonorsCompetitions = list()
individualHonorsYears = list()

for h in allHonors:
  honorsNames.append(h[0])
  honorsClubs.append(h[1])
  honorsYears.append(h[2])

for ih in allIndividualHonors:
  if ih[0] != 'Ballon dOr':
   individualHonorsNames.append(ih[0])
   individualHonorsCompetitions.append(ih[1])
   individualHonorsYears.append(ih[2])
  else:
   individualHonorsNames.append(ih[0])
   individualHonorsCompetitions.append('na')
   individualHonorsYears.append(ih[1])

uniqueHonors = list()
for h in honorsNames:
  if h not in uniqueHonors: uniqueHonors.append(h)

uniqueIndividualHonors = list()
for ih in individualHonorsNames:
  if ih not in uniqueIndividualHonors: uniqueIndividualHonors.append(ih)

print(f'Honors won:')
print()

for u in uniqueHonors:
  count = honorsNames.count(u)
  indexList = list()
  for i in range(0, len(honorsNames)):
    if honorsNames[i] == u: indexList.append(i)
  clubsPerHonor = list()
  for i in indexList:
    if honorsClubs[i] not in clubsPerHonor: clubsPerHonor.append(honorsClubs[i])
  clubHonorYearIndexes = dict()
  for c in clubsPerHonor:
    clubHonorYearIndexes[c] = list()
    for i in indexList:
      if honorsClubs[i] == c:
        l = clubHonorYearIndexes[c]
        l.append(i)
  print(f'{count}x {u} (', end='')
  for n in range(0, len(clubsPerHonor)):
      cl = clubsPerHonor[n]
      if n != len(clubsPerHonor)-1:
        for i in clubHonorYearIndexes[cl]:
          if i != max(clubHonorYearIndexes[cl]): print(f'{honorsYears[i]}, ', end='')
          else: print(f'{honorsYears[i]}; ', end='')
        print(f'{cl}, ', end='')
      else:
        for i in clubHonorYearIndexes[cl]:
          if i != max(clubHonorYearIndexes[cl]): print(f'{honorsYears[i]}, ', end='')
          else: print(f'{honorsYears[i]}; ', end='')
        print(f'{cl}', end='')
  print(')')

if len(individualHonorsNames) > 0: print()
for uh in uniqueIndividualHonors:
  if uh == 'Ballon dOr':
    count = individualHonorsNames.count(uh)
    indexList = list()
    for i in range(0, len(individualHonorsNames)):
      if individualHonorsNames[i] == uh: indexList.append(i)
    print(f'{count}x {uh} (', end='')
    for i in indexList:
      if i != max(indexList):
        print(f'{individualHonorsYears[i]}, ', end='')
      else:
        print(f'{individualHonorsYears[i]})')
  else:
    count = individualHonorsNames.count(uh)
    indexList = list()
    for i in range(0, len(individualHonorsNames)):
      if individualHonorsNames[i] == uh: indexList.append(i)
    compsPerHonor = list()
    for i in indexList:
      if individualHonorsCompetitions[i] not in compsPerHonor: compsPerHonor.append(individualHonorsCompetitions[i])
    compHonorYearIndexes = dict()
    for c in compsPerHonor:
      compHonorYearIndexes[c] = list()
      for i in indexList:
        if individualHonorsCompetitions[i] == c:
          l = compHonorYearIndexes[c]
          l.append(i)
    print(f'{count}x {uh} (', end='')
    for n in range(0, len(compsPerHonor)):
      cl = compsPerHonor[n]
      if n != len(compsPerHonor)-1:
        for i in compHonorYearIndexes[cl]:
          if i != max(compHonorYearIndexes[cl]): print(f'{individualHonorsYears[i]}, ', end='')
          else: print(f'{individualHonorsYears[i]}; ', end='')
        print(f'{cl}, ', end='')
      else:
        for i in compHonorYearIndexes[cl]:
          if i != max(compHonorYearIndexes[cl]): print(f'{individualHonorsYears[i]}, ', end='')
          else: print(f'{individualHonorsYears[i]}; ', end='')
        print(f'{cl}', end='')
    print(')')

print("")
if nbs > 0:
  print(f"{firstName} {lastName}'s personal best seasons:")
  print("")
  print ("{:<19} {:<25} {:<20} {:<15} {:<10} {:<10}".format(color.UNDERLINE + 'Years','Club (+ national team)','Appearances','Goals','Assists','Position' + color.END))
  for k, v in bestSeasons.items():
   yearsj, clubj, appearancesj, goalsj, assistsj, positionj = v
   print ("{:<15} {:<25} {:<20} {:<15} {:<10} {:<10}".format(yearsj, clubj, appearancesj, goalsj, assistsj, positionj))